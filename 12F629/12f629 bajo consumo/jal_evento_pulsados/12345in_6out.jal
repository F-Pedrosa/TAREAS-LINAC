include 12f629

pragma target clock 4_000_000      ; frecuencia oscilador interno

pragma target OSC      INTOSC_NOCLKOUT
pragma target BROWNOUT DISABLED
pragma target MCLR     INTERNAL
pragma target WDT      DISABLED
--

; Este código en ensamblador viene del ejemplo de uso de las JalLib para el 12F675
; Y TIENE QUE ESTAR SIEMPRE PRESENTE.
assembler
  page call 0x3FF
  bank movwf OSCCAL                ; valor de calibración de fábrica del oscilador interno
end assembler

enable_digital_io()                ; todos los pines disponibles como digitales
include delay

; Definiciones de direcciones de las líneas
pin_GP5_direction = INPUT
alias entrada1 is pin_GP5
pin_GP4_direction = INPUT
alias entrada2 is pin_GP4
pin_GP3_direction = INPUT
alias entrada3 is pin_GP3
pin_GP2_direction = INPUT
alias entrada4 is pin_GP2
pin_GP1_direction = INPUT
alias entrada5 is pin_GP1

pin_GP0_direction = OUTPUT
alias salida6 is pin_GP0

; salidas apagadas
salida6 = off

; banderas de las salidas
var bit encender = false
; tiempos de encendido en segundos
const byte tiempo_encendido = 3

var byte tiempo = 0
var byte tiempo_inicial = 0


OPTION_REG_NGPPU = false          ; este bit es activo negado, por alguna idea peregrina de los diseñadores
; habilitar los pull-ups en las dos entradas que los tienen (la 3ra usa una R externa)
;WPU_WPU6 = true
WPU_WPU5 = true
WPU_WPU4 = true
WPU_WPU1 = true
WPU_WPU2 = true

; habilitar la interrupción por cambio en las entradas
IOC_IOC1 = true
IOC_IOC2 = true
IOC_IOC3 = true
IOC_IOC4 = true
IOC_IOC5 = true
; habilitaciones generales de interrupciones
OPTION_REG_INTEDG = false
INTCON_GPIE = true
INTCON_GIE = true

------------------------------------------------------------------
; este bloque setea y arranca al Timer1 con el cual la librería rtc_isr_tmr1
; producirá un incremento de una variable interna llamada seconds (que cuenta segundos)
; y con la cual se controlará las cronizaciones.
include rtc_isr_tmr1
T1CON_T1CKPS   = 0b00      -- 1:1 prescaler
T1CON_T1OSCEN  = off
T1CON_TMR1CS   = off
T1CON_TMR1ON   = on        -- TMR1 on
PIE1_TMR1IE    = on        -- TMR1 interrupt enabled
INTCON_PEIE    = on        -- peripheral interrupt enabled
INTCON_GIE     = on        -- global interrupt enabled
-------------------------------------------------------------------

delay_100ms(10)
INTCON_GPIF = low
; salidas apagadas
;salida5 = off
salida6 = off

var bit terminado = true

; Rutina de interrupción
PROCEDURE rutina_isr() IS
   PRAGMA INTERRUPT
   if INTCON_GPIF then
      INTCON_GPIF = low
      if entrada5 == low then
         encender = true
         terminado = false
      end if
      if entrada4 == low then
         encender = true
         terminado = false
      end if
      if entrada2 == low then
         encender = true
         terminado = false
      end if
      if entrada3 == low then
         encender = true
         terminado = false
      end if
      if entrada1 == low then
         encender = true
         terminado = false
      end if
   end if
END PROCEDURE


forever loop
   if encender then
      encender = false
      salida6 = on
      tiempo_inicial = seconds
      INTCON_GPIF = low
   end if

   tiempo = seconds
   if tiempo >= (tiempo_inicial + tiempo_encendido) then
      salida6 = off
      tiempo = 0
      tiempo_inicial = 0
      terminado = true
   end if

   if (terminado) then
      asm sleep
   end if
end loop

