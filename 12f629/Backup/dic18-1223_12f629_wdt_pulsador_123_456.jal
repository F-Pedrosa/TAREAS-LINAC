include 12f629                     -- target PICmicro

pragma target clock 4_000_000      -- oscillator frequency

pragma target OSC      INTOSC_NOCLKOUT
pragma target BROWNOUT DISABLED
pragma target MCLR     INTERNAL
--

; Este código en ensamblador viene del ejemplo de uso de las JalLib para el 12F675
; Y TIENE QUE ESTAR SIEMPRE PRESENTE.
assembler
  page call 0x3FF
  bank movwf OSCCAL                ; valor de calibración de fábrica del oscilador interno
end assembler

enable_digital_io()                 -- make all pins digital I/O
OPTION_REG = 0b00001110    ; ajuste del prescaler del watchdog para que de unos 1,1 seg

; Definiciones de direcciones de las líneas
pin_GP5_direction = INPUT
alias entrada1 is pin_GP5
pin_GP4_direction = INPUT
alias entrada2 is pin_GP4
pin_GP3_direction = INPUT
alias entrada3 is pin_GP3

pin_GP2_direction = OUTPUT
alias salida6 is pin_GP2
pin_GP1_direction = OUTPUT
alias salida5 is pin_GP1
pin_GP0_direction = OUTPUT
alias salida4 is pin_GP0

; salidas apagadas
salida4 = off
salida5 = off
salida6 = off

include delay
delay_100ms(10)

; banderas de las salidas
var bit encender4 = false
var bit encender5 = false
var bit encender6 = false

const word tiempo = 20
const byte encendido = 4
const byte encendido1 = 8

OPTION_REG_NGPPU = false
WPU_WPU0 = true
;WPU_WPU1
;WPU_WPU2
;WPU_WPU4
;WPU_WPU5
IOC_IOC3 = true
OPTION_REG_INTEDG = false
INTCON_GPIE = true
INTCON_GIE = true


PROCEDURE rutina_isr() IS
   PRAGMA INTERRUPT
   if INTCON_GPIF then
      INTCON_GPIF = low
      if entrada1 == low then
         encender4 = true
         encender5 = false
         encender6 = false
      elsif entrada2 == low then
         encender5 = true
         encender4 = false
         encender6 = false
      elsif entrada3 == low then
         encender6 = true
         encender5 = false
         encender4 = false
      end if
   end if
END PROCEDURE


forever loop
  for tiempo loop
      if encender4 then
         encender4 = false
         salida4  = on
         for encendido loop
             asm CLRWDT
             delay_100ms(5)
         end loop
         salida4  = off
      end if
      if encender5 then
         encender5 = false
         salida5  = on
         for encendido loop
             asm CLRWDT
             delay_100ms(5)
         end loop
         salida5  = off
      end if
      if encender6 then
         encender6 = false
         salida6  = on
         for encendido loop
             asm CLRWDT
             delay_100ms(5)
         end loop
         salida6  = off
      end if

      asm sleep
  end loop
  salida4 = on
  for encendido1 loop
      delay_100ms(5)
      asm CLRWDT
  end loop
  salida4 = off
  asm CLRWDT
end loop

