include 12f629                     -- target PICmicro

pragma target clock 4_000_000      -- oscillator frequency

pragma target OSC      INTOSC_NOCLKOUT
pragma target BROWNOUT DISABLED
pragma target MCLR     INTERNAL

; Este código en ensamblador viene del ejemplo de uso de las JalLib para el 12F675
; Y TIENE QUE ESTAR SIEMPRE PRESENTE.
assembler
  page call 0x3FF
  bank movwf OSCCAL                ; valor de calibración de fábrica del oscilador interno
end assembler

enable_digital_io()                 -- make all pins digital I/O
OPTION_REG = 0b00001110    ; ajuste del prescaler del watchdog para que de unos 1,1 seg

; Definiciones de direcciones de las líneas
pin_GP5_direction = INPUT
alias entrada1 is pin_GP5
pin_GP4_direction = INPUT
alias entrada2 is pin_GP4
pin_GP3_direction = INPUT
alias entrada3 is pin_GP3

pin_GP2_direction = OUTPUT
alias salida6 is pin_GP2
pin_GP1_direction = OUTPUT
alias salida5 is pin_GP1
pin_GP0_direction = OUTPUT
alias salida4 is pin_GP0

; salidas apagadas
salida4 = off
salida5 = off
salida6 = off

include delay
delay_100ms(10)

; banderas de las salidas
var bit encender4 = false
var bit encender5 = false
var bit encender6 = false

const word tiempo = 10
const byte encendido = 4
const byte encendido1 = 2


; tiempos de encendido en segundos
const byte tiempo_encendido1 = 3
const byte tiempo_encendido2 = 5
const byte tiempo_encendido3 = 7


var byte tiempo1 = 0
var byte tiempo2 = 0
var byte tiempo3 = 0
var byte tiempo_inicial1 = 0
var byte tiempo_inicial2 = 0
var byte tiempo_inicial3 = 0





OPTION_REG_NGPPU = false          ; este bit es activo negado, por alguna idea peregrina de los diseñadores
; habilitar los pull-ups en las dos entradas que los tienen (la 3ra usa una R externa)
WPU_WPU5 = true
WPU_WPU4 = true
; habilitar la interrupción por cambio en las entradas
IOC_IOC5 = true
IOC_IOC4 = true
IOC_IOC3 = true
; habilitaciones generales de interrupciones
OPTION_REG_INTEDG = false
INTCON_GPIE = true
INTCON_GIE = true

;-----------------------------------------------------------------
; este bloque setea y arranca al Timer1 con el cual la librería rtc_isr_tmr1
; producirá un incremento de una variable interna llamada seconds (que cuenta segundos)
; y con la cual se controlará las cronizaciones.
include rtc_isr_tmr1
T1CON_T1CKPS   = 0b00       1:1 prescaler
T1CON_T1OSCEN  = off
T1CON_TMR1CS   = off
T1CON_TMR1ON   = on         TMR1 on
PIE1_TMR1IE    = on         TMR1 interrupt enabled
INTCON_PEIE    = on         peripheral interrupt enabled
INTCON_GIE     = on         global interrupt enabled
;-----------------------------------------------------------------


;salida4 = on

;delay_100ms(10)
;INTCON_GPIF = low
;; salidas apagadas
;salida4 = off
;salida5 = off
;salida6 = off


PROCEDURE rutina_isr() IS
   PRAGMA INTERRUPT
   if INTCON_GPIF then
      INTCON_GPIF = low
      if entrada1 == low then
         encender4 = true
         encender5 = false
         encender6 = false
      elsif entrada2 == low then
         encender5 = true
         encender4 = false
         encender6 = false
      elsif entrada3 == low then
         encender6 = true
         encender5 = false
         encender4 = false
      end if
   end if
END PROCEDURE



;salida4 = on
;delay_100ms(4)
;salida4 = off


forever loop

  for tiempo loop
      if encender4 then
         encender4 = false
         salida4  = on
         for encendido loop
             asm CLRWDT
             delay_100ms(5)
         end loop
         salida4  = off
      end if
      if encender5 then
         encender5 = false
         salida5  = on
         for encendido loop
             asm CLRWDT
             delay_100ms(5)
         end loop
         salida5  = off
      end if
      if encender6 then
         encender6 = false
         salida6  = on
         for encendido loop
             asm CLRWDT
             delay_100ms(5)
         end loop
         salida6  = off
      end if

      encender4 = false
      encender5 = false
      encender6 = false
      asm sleep
  end loop

;  tiempo_inicial1 = seconds
;  salida4 = on
;  while tiempo1 >= (tiempo_inicial1 + encendido1) loop
;      asm CLRWDT
;      tiempo1 = seconds
;  end loop
;  salida4 = off
;  tiempo1 = 0
;  tiempo_inicial1 = 0

;  asm CLRWDT

end loop

