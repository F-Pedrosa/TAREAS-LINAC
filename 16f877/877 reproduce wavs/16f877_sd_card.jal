-- Title: Library for communicating with SD memory cards
-- Author: Matthew Schinkel - borntechi.com, copyright (c) 2009, all rights reserved.
-- Adapted-by:   ct changed pin a4 ss to pin_c2
-- Compiler: >=2.4l
-- mod ct 13/11/09   and 8/12/09 pins defined elsewhere
-- This file is part of jallib (http://jallib.googlecode.com)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description: this library provides functions for SD memory cards.
--
-- Sources:
-- SanDisk Secure Digital Card - http://www.cs.ucr.edu/~amitra/sdcard/ProdManualSDCardv1.9.pdf
-- How to use MMC/SDC - http://forums.parallax.com/forums/attach.aspx?a=32012
--

-- compiler dependant device definitions
include 16f877
;include 18f4520

pragma target OSC HS               -- HS crystal or resonator
pragma target clock 20_000_000     -- oscillator frequency
pragma target WDT  disabled
pragma target LVP  disabled

;const bit enhanced_flash_eeprom = true

include delay           -- include the delay library

-- setup uart for communication
;const usart_hw_serial     = true    -- true = rs232, false = spi
;const serial_hw_baudrate  = 19200   -- set the baudrate
const serial_hw_baudrate  = 115200
include serial_hardware
serial_hw_init()

-- pin assignments, choose the pin your led is connected to
alias      led                is pin_c0           -- the led pin
alias     led_direction      is pin_c0_direction -- the pin's directional select bit
;var bit pin_sck is pin_c3
;var bit pin_sdi is pin_c4
;var bit pin_sdo is pin_c5
;var bit pin_ss is pin_c2
;var bit pin_sck_direction  is pin_c3_direction
;var bit pin_sdi_direction  is pin_c4_direction
;var bit pin_sdo_direction  is pin_c5_direction
;var bit pin_ss_direction  is pin_c2_direction

-- setup spi
include spi_master_hw         -- includes the spi library
;spi_init(SPI_MODE_11,SPI_RATE_FOSC_16)
spi_init(SPI_MODE_11,SPI_RATE_FOSC_4)
-- define spi inputs/outputs
pin_sdi_direction = input    -- spi input
pin_sdo_direction = output   -- spi output
pin_sck_direction = output   -- spi clock
-- spi chip select pin
;ALIAS chip_select_direction   is pin_SS_direction
;ALIAS chip_select             is pin_SS
ALIAS chip_select_direction   is pin_c2_direction
ALIAS chip_select             is pin_c2
chip_select_direction = output    -- chip select/slave select pin
chip_select = low -- start chip slect low

include sd_card -- include sd card library
sd_init()       -- initalize the sd card


const byte msg0[] = "Leyendo CID y CSD de la tarjeta"
const byte msg1[] = "Leyendo MBR"
const byte msg2[] = "Escribiendo Sector 20"
const byte msg3[] = "Leyendo Sector 20"
const byte msg4[] = "Listo!"

procedure cr_lf is
   serial_hw_write (13)
   serial_hw_write (10)
end procedure


------------------------------------------------------------
-- START of PROGRAM
------------------------------------------------------------

var byte y = 0

_usec_delay(100_000)                  -- wait for power to settle
trisc = 0b_0001_0000

var byte low_byte, high_byte          -- vars for sending and recieving data

led = on


;cr_lf
;y = 0
;for count(msg0) using y loop
;   serial_hw_write (msg4[y])
;end loop
;cr_lf
;delay_100ms(10)
;
;; Código de prueba pasado por Matthew, está para verificar!!!!!!
;; ----------------------------------------------------------------------
;var byte data, x
;chip_select = low -- enable the sd card
;send_command (SD_SEND_CSD, 0,x) -- send the CSD command
;while spi_master_hw != 0xFE loop -- wait for data to be ready
;end loop
;for 16 loop -- get CSD bits
;data = spi_master_hw
;serial_hw_data = data -- send data via serial port
;end loop
;x = spi_master_hw ;get the crc byte1
;x = spi_master_hw ;get the crc byte2
;chip_select = high -- disable the sd card
;; ----------------------------------------------------------------------
;
;cr_lf
;y = 0
;for count(msg4) using y loop
;   serial_hw_write (msg4[y])
;end loop
;cr_lf



; Mensaje 1
y = 0
for count(msg1) using y loop
   serial_hw_write (msg1[y])
end loop
cr_lf
delay_100ms(10)

-- read the boot sector (sector 0)
sd_start_read(0)                    -- get sd card ready for read at sector 0
for 256 loop                          -- read 1 sector (256 words)
  sd_read_data (low_byte, high_byte)  -- read 2 bytes of data
  serial_hw_write (low_byte)          -- send byte via serial port
  serial_hw_write (high_byte)         -- send byte via serial port
end loop
sd_stop_read()                        -- tell sd card you are done reading

cr_lf
y = 0
for count(msg4) using y loop
   serial_hw_write (msg4[y])
end loop
cr_lf

delay_100ms(10)

led = off
delay_1ms(10)
led = on

-- write (, ) to sector 20 over and over.
low_byte = "a"                       -- set low byte to write
high_byte = "b"                      -- set high byte to write

cr_lf
y = 0
for count(msg2) using y loop
   serial_hw_write (msg2[y])
end loop
cr_lf
delay_100ms(10)

sd_start_write(20)                    -- get sd card ready for write
for 256 + 128 loop                    -- write 1 sector + 1/2 sector
  sd_write_data(low_byte, high_byte)    -- write data to the card
  low_byte = low_byte
  high_byte = high_byte
end loop
sd_write_to_sector_end(0x00)          -- 2nd sector is not done, so finish it
sd_stop_write()

cr_lf
y = 0
for count(msg4) using y loop
   serial_hw_write (msg4[y])
end loop
cr_lf

delay_100ms(10)

led = off
delay_1ms(10)                        -- need delay between write and next read CT
led = on                             -- delay now in sd card library

cr_lf
y = 0
for count(msg3) using y loop
   serial_hw_write (msg3[y])
end loop
cr_lf

delay_100ms(10)

-- read the data back, should get (high_byte, low_byte) over and over.
sd_start_read(20)                     -- get sd card ready for read at sector 20
for 512 loop                          -- read 2 sectors (512 words)
  sd_read_data (low_byte, high_byte)  -- read 2 bytes of data
  serial_hw_write (low_byte)          -- send byte via serial port
  serial_hw_write (high_byte)         -- send byte via serial port
end loop
sd_stop_read()                        -- tell sd card you are done reading
led = off

delay_100ms(10)
y = 0
cr_lf
for count(msg4) using y loop
   serial_hw_write (msg4[y])
end loop
cr_lf

delay_100ms(10)



