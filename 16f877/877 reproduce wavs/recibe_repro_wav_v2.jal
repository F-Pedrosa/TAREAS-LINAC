include 16f877

pragma target OSC HS
pragma target clock 20_000_000
pragma target WDT  disabled
pragma target LVP  disabled

include delay

; setup rs-232 x hardware
const serial_hw_baudrate  = 115200
include serial_hardware
serial_hw_init()

; led testigo
alias  testigo is pin_c0
pin_c0_direction = output

portb_direction = all_output

; setup spi e inclusión librería spi (el hardware para comunicarse con la SD)
include spi_master_hw
spi_init(SPI_MODE_11,SPI_RATE_FOSC_4)
; definir entradas/salidas spi (no hay mucha alternativa, las fija el hard, excepto a ChipSelect)
pin_sdi_direction = input    ; entrada datos spi
pin_sdo_direction = output   ; salida datos spi
pin_sck_direction = output   ; clock spi (salida)
; spi chip select pin
ALIAS chip_select_direction   is pin_c2_direction
ALIAS chip_select             is pin_c2
chip_select_direction = output    ; pin chip select como salida
chip_select = low                 ; arrancar con chip slect en 0

; incluir librería sd card
include sd_card
sd_init()       ; inicializar la tarjeta sd

; librería para acceso eeprom INTERNA del PIC
include pic_data_eeprom


const byte msg_inicio[] = "Iniciando programa y esperando comando..."

const byte msg_indice[] = "Contenido del Indice:"
const byte msg_indice_nombre[] = "Nombre:"
const byte msg_indice_tamanio[] = "Tamaño:"
const byte msg_indice_sector[] = "Sector inicial:"

; arreglo que contendrá el nombre del archivo, enviado desde la PC, asumimos tamaño máximo 20 caracteres.
var byte nombre_archivo[20]

; led testigo
alias led is pin_c0
pin_c0_direction = output

; Globales
var byte desde_pc = 0
var dword tamanio = 0
var dword contador = 0
var byte indice = 0
var byte individual[12]
var byte indi[4] at tamanio
var byte low_byte, high_byte
var bit bandera = 0
var byte y = 0

var byte digi5 = 0
var byte digi4 = 0
var byte digi3 = 0
var byte digi2 = 0
var byte digi1 = 0
var byte digi0 = 0

var dword sector_inicial = 0

; --------------------------------------- Procedimientos --------------------------------------------

procedure cr_lf is
   serial_hw_write (13)
   serial_hw_write (10)
end procedure

function dig2bin(byte in di2,byte in di1,byte in di0) return byte is
   var byte resultado = 0
   var byte temporal = 0
   
   di2 = di2 - 48
   di1 = di1 - 48
   di0 = di0 - 48
   
   if di2 != 0 then
      resultado = di2 * 100
   end if
   temporal = di1 * 10
   resultado = resultado + temporal
   resultado = resultado + di0
   return resultado
end function

procedure bin2digits( byte out dig2, byte out dig1, byte out dig0, byte in numero ) is
   var byte centena = 0
   var byte decena = 0
   centena = numero / 100
   dig2 = centena
   centena = dig2 * 100
   numero = numero - centena
   decena = numero / 10
   dig1 = decena
   decena = dig1 * 10
   numero = numero - decena
   dig0 = numero
end procedure

; Para convertir un word en 4 dígitos separados.
procedure word2digits( byte out dig3, byte out dig2, byte out dig1, byte out dig0, word in numero ) is

   var word miles = 0
   var byte centena = 0
   var byte decena = 0

   miles = numero / 1000
   dig3 = byte(miles)
   miles = miles * 1000
   numero = numero - miles
   centena = byte(numero / 100)
   dig2 = centena
   centena = dig2 * 100
   numero = numero - centena
   decena = byte(numero / 10)
   dig1 = decena
   decena = dig1 * 10
   numero = numero - decena
   dig0 = byte(numero)

end procedure

; Para convertir un dword en 6 dígitos separados.
procedure dword2digits( byte out dig5, byte out dig4, byte out dig3, byte out dig2, byte out dig1, byte out dig0, dword in numero ) is

   var dword centemil = 0
   var dword decemil = 0
   var dword miles = 0
   var dword centena = 0
   var dword decena = 0

   centemil = numero / 100_000
   dig5 = byte( centemil)
   centemil = centemil * 100_000
   numero = numero - centemil
   decemil = numero / 10_000
   dig4 = byte(decemil)
   decemil = decemil * 10_000
   numero = numero - decemil
   miles = numero / 1000
   dig3 = byte(miles)
   miles = miles * 1000
   numero = numero - miles
   centena = numero / 100
   dig2 = byte(centena)
   centena = dig2 * 100
   numero = numero - centena
   decena = numero / 10
   dig1 = byte(decena)
   decena = dig1 * 10
   numero = numero - decena
   dig0 = byte(numero)

end procedure

procedure msg_serial(byte in string[], bit in cr) is
   var word len = count(string)
   var byte i
   for len using i loop
      serial_hw_write(string[i])
   end loop
   if cr then
      cr_lf
   end if
end procedure


; --------------------------------------- PRINCIPAL --------------------------------------------

data_eeprom_write(200,"1")
data_eeprom_write(201,"2")

var byte i = 0

; lazo para evitar el chasquido de encendido, al reproducir un wav desde la SD
y = 0
portb = 0
for 128 using y loop
    portb = y
    _usec_delay(25)
end loop
; testigo luminoso
testigo = on
for 2 loop
   delay_100ms(10)
end loop
testigo = off
; Mensaje de presentación, hacia la PC
msg_serial(msg_inicio,1)

forever loop

   if Serial_hw_read(desde_pc) then
      ; si es llegó "a" quiere decir que a continuación viene el wav en forma de stream de bytes
      ; precedido por la info (12 bytes) que indica el tamaño del archivo (como string).
      if desde_pc == "a" then
         ; recibir dword con tamaño archivo
         indice = 0
         for 12 loop
             desde_pc = serial_hw_data
             individual[indice] = desde_pc
             indice = indice + 1
         end loop
         indi[3] = dig2bin(individual[0],individual[1],individual[2])
         indi[2] = dig2bin(individual[3],individual[4],individual[5])
         indi[1] = dig2bin(individual[6],individual[7],individual[8])
         indi[0] = dig2bin(individual[9],individual[10],individual[11])

         ; lazo para recibir el nombre del archivo y guardarlo en índice
         ; la marca del final del nombre es el caracter "." (46)
         while desde_pc != 46 loop
            desde_pc = serial_hw_data
            nombre_archivo[i] = desde_pc
            i = i + 1
         end loop
         i = 0
         ; grabar nombre de archivo en eeprom interna (20 caracteres)
         for count(nombre_archivo) using i loop
            data_eeprom_write(0,nombre_archivo[i])
         end loop
         ; grabar tamaño en eeprom interna (4 bytes, un dword)
         data_eeprom_write_dword(20,tamanio)
         ; grabar sector inicial en eeprom interna (otro dword)
         data_eeprom_write_dword(24,sector_inicial)
         ; a partir de acá recibir el stream de bytes y escribirlos en la SD
         ; se llegó a la cantidad de bytes dada por el tamaño?
         sd_start_write(sector_inicial)                 ; arrancamos la escritura (=2)
         while contador <= tamanio loop
            desde_pc = serial_hw_data
            if bandera == 0 then
               low_byte = desde_pc
               bandera = 1
            else
               high_byte = desde_pc
               bandera = 0
               sd_write_data(low_byte, high_byte)
            end if
            contador = contador + 1
         end loop
         sd_write_to_sector_end(0x00)
         sd_stop_write()
      elsif desde_pc == "b" then
         ; leer bytes desde la tarjeta SD y mandarlos al puerto B, donde está conectados
         ; un DAC0800 y un amplificador de audio
         sd_start_read(sector_inicial)  ; alistar sd card para lectura sectores predefinidos (que debe coincidir con los escritos antes)
         while contador < 85_784 loop             ; 86640 = tamaño wav dividido en 2 porque leo de a 2 bytes de la SDS
            sd_read_data (low_byte, high_byte)  ; leer 2 bytes
            ; La tasa de muestreo se asume en 22050 (debe coincidir con la del wav!!!!!)
            ; retardo para adecuar la tasa de muestreo? usar interrupción?
            ; Para una tasa de muestreo de 22050, corresponde un delay de ~45 us entre muestras (?????????)
            ; mandar al DAC
            PORTB = low_byte
            _usec_delay(25)
            PORTB = high_byte
            _usec_delay(15)
            contador = contador + 1
         end loop
         contador = 0
         sd_stop_read()
      elsif desde_pc == "c" then   ; lazo de prueba para verificar el DAC0800, mandándole valores.
         var word sumador = 0
         while true loop
             while sumador < 255 loop
                   portb = byte(sumador)
                   sumador = sumador + 1
             end loop
             while sumador > 0 loop
                   portb = byte(sumador)
                   sumador = sumador - 1
             end loop
         end loop
      elsif desde_pc == "0" then
         var byte dato
         var dword taman
         var dword sect
         ; leer contenido del "índice" desde eeprom interna para enviarlo hacia la PC.
         ; leer campo nombre eeprom interna
         msg_serial(msg_indice,1)
         serial_hw_write ("#")
         serial_hw_write ("1")
         serial_hw_write (" ")
         serial_hw_write ("-")
         serial_hw_write (" ")
         i = 0
         msg_serial(msg_indice_nombre,0)
         for 20 using i loop
             data_eeprom_read(i,dato)
             serial_hw_write (dato)
         end loop
         cr_lf
         msg_serial(msg_indice_tamanio,0)
         ; leer campo tamaño eeprom interna
         data_eeprom_read_dword(20,taman)
         dword2digits(digi5,digi4,digi3,digi2,digi1,digi0,taman)
         serial_hw_write(digi5+48)
         serial_hw_write(digi4+48)
         serial_hw_write(digi3+48)
         serial_hw_write(digi2+48)
         serial_hw_write(digi1+48)
         serial_hw_write(digi0+48)
         cr_lf
         ; leer campo sector inicial eeprom interna
         data_eeprom_read(24,sect)
         msg_serial(msg_indice_sector,0)
         dword2digits(digi5,digi4,digi3,digi2,digi1,digi0,sect)
         serial_hw_write(digi5+48)
         serial_hw_write(digi4+48)
         serial_hw_write(digi3+48)
         serial_hw_write(digi2+48)
         serial_hw_write(digi1+48)
         serial_hw_write(digi0+48)
         cr_lf
      elsif desde_pc == "1" then       ; como testigo de comunicación
         serial_hw_write ("O")
         serial_hw_write ("K")
         cr_lf
      elsif desde_pc == "2" then       ; para borrar sectores iniciales de la SD y dejarlos en 0
         testigo = on
         sd_start_write(2)
         for 256000 loop              ; 256000 = 256*1000  o sea 1000 sectores x 2 bytes x 256 (sector = 512 bytes)
            sd_write_data(0,0)  ; el número 1000 no tiene ningún sentido especial, es sólo por probar.
         end loop
         sd_stop_write()
         testigo = off
      elsif desde_pc == "3" then            ; borrar sector 1
         testigo = on
         sd_start_write(1)
         for 256 loop              ; 256000 = 256*1000  o sea 1000 sectores x 2 bytes x 256 (sector = 512 bytes)
            sd_write_data(0,0)  ; el número 1000 no tiene ningún sentido especial, es sólo por probar.
         end loop
         sd_stop_write()
         testigo = off
      end if
   end if
end loop
