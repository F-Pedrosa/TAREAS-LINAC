; Firmware para grabación datos acelerómetro, prueba de funcionamiento de hard

include 16f877a

pragma target OSC HS
pragma target clock 20_000_000
-- no watchdog, no LVP
pragma target WDT  disabled
pragma target LVP  disabled
enable_digital_io()
include delay

; -------------------------------
; Configurar ADC...
const bit ADC_HIGH_RESOLUTION = high
; Número canales analógicos
const byte ADC_NCHANNEL = 8     ; porque la ACELERO1 tiene todos sus canales analógicos usados
; Sin referencias de tensión
const byte ADC_NVREF = ADC_NO_EXT_VREF
; Constante q fija la adquisición lo más rápido posible (~20 useg según hoja de datos)
const ADC_MIN_TAD = 8
; Librería ADC
include adc
; Inicialización de la misma
adc_init()


;const serial_hw_baudrate = 115_200
;include serial_hardware
;serial_hw_init()


; I2C pines
alias i2c_scl            is pin_c3
alias i2c_scl_direction  is pin_c3_direction
alias i2c_sda            is pin_c4
alias i2c_sda_direction  is pin_c4_direction
; constantes
const word _i2c_bus_speed = 1 ;  100kHz
const bit _i2c_level = true   ; i2c levels (not SMB)
; incluir e inicializar librería I2C (RTC y eeprom)
include i2c_hardware
i2c_initialize()

alias testigo is pin_b7
pin_b7_direction = output

alias zumbador is pin_d7
pin_d7_direction = output

alias rele_rtc is pin_d6
pin_d6_direction = output



var byte digi4 = 0
var byte digi3 = 0
var byte digi2 = 0
var byte digi1 = 0
var byte digi0 = 0

var byte anio = 0
var byte mes = 0
var byte dia = 0
var byte hora = 0
var byte minuto = 0
var byte segundo = 0
var word direccion = 0

var word cronizador_milesimas = 0
var byte segundo_inicial = 0

; en estas variables quedan los valores analógicos adquiridos de los acelerómetros.
var word valor_anl_x = 0
var word valor_anl_y = 0
var word valor_anl_z = 0

const byte cual_caso =  3 ; el default es el caso base (x,y,z)

; ========================================== INTERRUPCIÓN TIMER1 =================================
; Los siguientes alias se agregan para corregir incompatibilidades de
; nombres entre diferentes versiones de librarías (JalLib).
alias TMR1IE is PIE1_TMR1IE
alias TMR1if is PIR1_TMR1IF
; ================================================================================================
OPTION_REG = 0
; Habilitar interrupciones de periféricos (entre ellos TIMER1)
INTCON = 0b_1100_0000
; Setear TMR1 en modo free run, con oscilador interno y sin prescaler
T1CON = 0b0000_0101
; TIMER1 deshabilitado al inicio
TMR1IE = off
; valores de inicialización correctos para Ttimer1 = 1 ms
const byte InitTMR1H = 236
const byte InitTMR1L = 120
var bit Flag_tmr1 = false
; rutina interrupción TMR1 propiamente dicha, que se ejecuta cada 1 msegs.
procedure TMR1_ISR is
  pragma interrupt
  if TMR1if then
     ; Resetear bandera
     TMR1if = low
     ; Reinicializar TMR1
     asm clrf TMR1L
     TMR1H = InitTMR1H
     TMR1L = InitTMR1L
     Flag_tmr1 = true
     ; --------------------------
     if cronizador_milesimas == 999 then
       cronizador_milesimas = 0
       if segundo == 59 then
          segundo = 0
       else
          segundo = segundo + 1
       end if
     else
       cronizador_milesimas = cronizador_milesimas + 1
     end if
     ; --------------------------
  end if
end procedure
; ============================================================================================


procedure bin2digits( byte out digi2, byte out digi1, byte out digi0, byte in numero ) is
   var byte centena = 0
   var byte decena = 0
   centena = numero / 100
   digi2 = centena
   centena = digi2 * 100
   numero = numero - centena
   decena = numero / 10
   digi1 = decena
   decena = digi1 * 10
   numero = numero - decena
   digi0 = numero
end procedure

procedure word2digits( byte out digi4, byte out digi3, byte out digi2, byte out digi1, byte out digi0, word in numero ) is
   var word dec_miles = 0
   var word miles = 0
   var word centena = 0
   var byte decena = 0
   dec_miles = numero/10000
   digi4 = byte(dec_miles)
   dec_miles = dec_miles * 10000
   numero = numero - dec_miles
   miles = numero / 1000
   digi3 = byte(miles)
   miles = miles * 1000
   numero = numero - miles
   centena = numero / 100
   digi2 = byte(centena)
   centena = digi2 * 100
   numero = numero - centena
   decena = byte(numero / 10)
   digi1 = decena
   decena = digi1 * 10
   numero = numero - decena
   digi0 = byte(numero)
end procedure

; Rutina para escribir  bytes en EEPROM, usando la característica de
; escritura por páginas de las eeproms, más rápido que byte a byte
; ATENCIÓN!!! LA TRAMA TIENE QUE TENER UN SUBMÚLTIPLO DE 32 PARA FUNCIONAR BIEN!!!!!
; POR ESO ACÁ SE LA HACE DE 16 BYTES!
procedure escribir_trama_eeprom( byte in eepr_pos, word in address, byte in cual_caso, word in val1, word in val2, word in val3 ) is
   var byte AX[2] at address
   var byte milis[2] at cronizador_milesimas
   var byte vl1[2] at val1
   var byte vl2[2] at val2
   var byte vl3[2] at val3
   var bit resul

   I2C_start()
   ; primero, enviar el id de la EEPROM (su dirección específica y bit R/W)
   resul = i2c_transmit_byte(eepr_pos)
   ; enviar dirección donde escribir
   resul = i2c_transmit_byte(AX[1])
   resul = i2c_transmit_byte(AX[0])
   ; Enviar "página" de bytes (datos) a grabar en eeprom
   ; empezando por fecha y hora, esta última expresada en pares ASCII
   ; fecha
   resul = i2c_transmit_byte(anio)
   resul = i2c_transmit_byte(mes)
   resul = i2c_transmit_byte(dia)
   ; hora
   resul = i2c_transmit_byte(hora)
   resul = i2c_transmit_byte(minuto)
   resul = i2c_transmit_byte(segundo)
   ; milesimas de segundo
   resul = i2c_transmit_byte(milis[1])
   resul = i2c_transmit_byte(milis[0])
   ; ahora el byte que indica de cual caso se trata
   resul = i2c_transmit_byte(cual_caso)
   ; ahora los canales analógicos
   resul = i2c_transmit_byte(vl1[1])
   resul = i2c_transmit_byte(vl1[0])
   resul = i2c_transmit_byte(vl2[1])
   resul = i2c_transmit_byte(vl2[0])
   resul = i2c_transmit_byte(vl3[1])
   resul = i2c_transmit_byte(vl3[0])
   ; byte dummy para que la trama tenga 16 bytes de largo y funcione bien la escritura x páginas.
   ; el soft VB deberá descartar o no leer el último byte de la trama al leer la eeprom.
   resul = i2c_transmit_byte(0)
   I2C_stop()
   ; retardo de grabación
   delay_1ms(4)
end procedure
procedure leer_rtc ( byte in ad, byte out digi1, byte out digi0 ) is
   var byte dato_rtc = 0
   var byte loc = 0
   var byte loc2 = 0
   var bit resul = false
   ;------------
   I2C_start()
   ; se envía la ID del RTC con LSB en 0...
   resul = i2c_transmit_byte(0b1101_0000)
   ; y luego el número de registro deseado...
   resul = i2c_transmit_byte(ad)
   I2C_stop()
   ;------------
   I2C_start()
   ; con el LSB de la ID del RTC en 1, se pide una lectura...
   resul = i2c_transmit_byte(0b1101_0001)
   ; y se recibe el contenido del registro pedido antes...
   dato_rtc = I2C_receive_byte( false )
   I2C_stop()
   ;------------
   loc = dato_rtc
   loc2 = dato_rtc
   loc = loc & 0xF0    ; 0xF0 = 0b11110000, separa nibble alto
   digi1 = loc / 16
   digi0 = loc2 & 15   ; 15 = 0b00001111, separa nibble bajo
end procedure

procedure obtener_fecha_hora is
   var byte digito1 = 0
   var byte digito0 = 0

   delay_1ms(5)

   leer_rtc(6,digito1,digito0)
   digito1 = digito1 * 10
   anio = digito1 + digito0
   ; ---------------------------
   leer_rtc(5,digito1,digito0)
   digito1 = digito1 * 10
   mes = digito1 + digito0
   ; ---------------------------
   leer_rtc(4,digito1,digito0)
   digito1 = digito1 * 10
   dia = digito1 + digito0
   ; ---------------------------
   leer_rtc(2,digito1,digito0)
   digito1 = digito1 * 10
   hora = digito1 + digito0
   ; ---------------------------
   leer_rtc(1,digito1,digito0)
   digito1 = digito1 * 10
   minuto = digito1 + digito0

   ; ---------------------------
;   leer_rtc(0,digito1,digito0)
;   digito1 = digito1 * 10
;   segundo = digito1 + digito0

end procedure


; ================================================================================================================================

; Bloque para sincronizar arranque interrupción Timer1 con la transición del registro de segundos del RTC
leer_rtc(0,digi1,digi0)
digi1 = digi1 * 10
segundo_inicial = digi1 + digi0
while segundo == segundo_inicial loop
   leer_rtc(0,digi1,digi0)
   digi1 = digi1 * 10
   segundo = digi1 + digi0
end loop
; Ahora activar interrupción Timer1, estará aproximadamente en sincronía con el RTC.
TMR1IE = on
cronizador_milesimas = 0
; inicializar variable segundos desde el RTC, la cual será después incrementada sólo por el PIC.
leer_rtc(0,digi1,digi0)
digi1 = digi1 * 10
segundo = digi1 + digi0

; para saber si el firm corre, desde afuera
testigo = on
zumbador = on
delay_100ms(10)
testigo = off
zumbador = off
delay_100ms(10)
rele_rtc = on
delay_100ms(1)
rele_rtc = off


; patas de salida
pin_c1_direction = output
pin_c0_direction = output

forever loop

       ; adquisición salida x del acelerómetro
       valor_anl_x = adc_read(7)
       delay_10us(20)
       ; adquisición salida y del acelerómetro
       valor_anl_y = adc_read(6)
       delay_10us(20)
       ; adquisición salida z del acelerómetro
       valor_anl_z = adc_read(5)
       delay_10us(20)       ; retardo para que termine de adquirir

       obtener_fecha_hora
       escribir_trama_eeprom(0b1010_0000, direccion, 3, valor_anl_x, valor_anl_y, valor_anl_z)
       direccion = direccion + 16

       delay_100ms(20)    ; cada 2 segundos grabar trama
       
       testigo = !testigo


       pin_c1 = ! pin_c1
       pin_c0 = ! pin_c0



end loop
