; Firmware de prueba para hacer funcionar la interrupción del pin B.0 con el fin
; de usarla en conjunto con el transceptor. Versión para un 16F877.

include 16f877a

pragma target clock    20_000_000
pragma target OSC      hs                        -- crystal > 4 Mhz
pragma target WDT      DISABLED                  -- watchdog
pragma target DEBUG    DISABLED                  -- debugging
pragma target BROWNOUT DISABLED                  -- brownout reset
pragma target LVP      DISABLED                  -- low voltage programming

enable_digital_io()                   ; todos los pines como I/O digitales en el arranque

include delay

alias led is pin_b7
pin_b7_direction = output

const INT_FALLING_EDGE = 0
const INT_RISING_EDGE = 1


OPTION_REG_INTEDG =  INT_FALLING_EDGE

-- alias the interrupt flags so they are readable.
alias INT_0_ENABLE_BIT is INTCON_INTE
alias INT_0_FLAG_BIT is INTCON_INTF
;alias INT_0_EDGE_BIT is INTCON2_INTEDG0


-- enable global interrupts
INTCON_GIE  = TRUE        -- Enables all unmasked interrupts
INTCON_PEIE = TRUE        -- Enables all unmasked peripheral interrupts


-- define your interrupt pin         ; este recibe la señal eléctrica y dispara la IRQ
alias interrupt_pin is pin_B0
alias interrupt_pin_direction is pin_B0_direction
interrupt_pin_direction = INPUT -- interrupt pin is input
INT_0_ENABLE_BIT = TRUE   -- interrupt pin enable bit for B0
procedure int_on_change_b0() -- procedure is written later

-- main interrupt handler
procedure interrupt() is
   pragma interrupt
   -- Check if interrupt pin 0 (B0) has an interrupt.
   if INT_0_FLAG_BIT then
      int_on_change_b0() -- call our B0 procedure
      INT_0_FLAG_BIT = FALSE -- reset interrupt flag
   end if
end procedure

-- interrupt for pin B0
-- define variables and procedure prototypes
procedure int_on_change_b0() is
   pragma inline
   if led == on then
      led = off
   else
      led = on
   end if
end procedure


led = off

led = on
delay_100ms(15)
led = off
delay_100ms(15)


forever loop
  delay_100ms(1)
end loop
