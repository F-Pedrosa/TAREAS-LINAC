; Firmware de base para la AME216NWS
include 18f4620

pragma target clock 20_000_000
pragma target PWRTE  enabled          ; power up timer enabled
pragma target OSC      HS             ; crystal or resonator
pragma target WDT      CONTROl        ; watchdog
pragma target XINST    DISABLED       ; extended instruction set
pragma target DEBUG    DISABLED       ; debugging
pragma target BROWNOUT DISABLED       ; brownout reset
pragma target FCMEN    DISABLED       ; clock monitoring
pragma target IESO     DISABLED       ; int/ext osc. switch
pragma target LVP      DISABLED       ; low voltage programming
pragma target MCLR     INTERNAL       ; E.3 habilitado

WDTCON_SWDTEN = OFF                 ; disable WDT
OSCCON_SCS = 0                      ; select primary oscillator
OSCTUNE_PLLEN = FALSE               ; no PLL

enable_digital_io()                   ; todos los pines como I/O digitales en el arranque

include delay
include print
 ; ------------------------------------------------------------------------------------------------------
alias zumbador is pin_e2
pin_e2_direction = output
zumbador = off

alias testigo is pin_b7
pin_b7_direction = output
testigo = off

alias entrada1 is pin_a0
alias entrada2 is pin_a1
alias entrada3 is pin_a2
pin_a0_direction = input
pin_a1_direction = input
pin_a2_direction = input

alias tension_pila_rtc is pin_e1
alias tension_alim is pin_a5
pin_a5_direction = input
pin_e1_direction = input

alias rele_pila_rtc is pin_d4
pin_d0_direction = output

alias rele_carga_sim900 is pin_b6
pin_b6_direction = output
; asegurarse que todos los relés estén desenergizados
rele_pila_rtc = off
rele_carga_sim900 = off

; Definiciones de pines de los conectores molex 2 pines de uso general
alias entsal1 is pin_d0
alias entsal2 is pin_d1
; Cualquiera de estas 2 líneas puede ser entrada o salida. Acá como salida sólo por definir.
pin_d0_direction = output
pin_d1_direction = output

; Definiciones de pines de los conectores RJ11
alias rj_1 is pin_d6
alias rj_2 is pin_d7
; definir dirección de dichos pines.
; Cualquiera de estas 2 líneas puede ser entrada o salida. Acá como salida sólo por definir.
pin_d7_direction = output
pin_d6_direction = output

entsal1 = 0
entsal2 = 0
rj_1 = 0
rj_2 = 0

; ==============================================================================================
; ATENCIÓN: las líneas de las borneras pueden detectar cierre de sus bornes cuando sus jupers
; están colocados. En esa condición, la línea (seteada como entrada), pasa de ON a OFF al cerrarse
; la conexión entre los bornes.
; ==============================================================================================
; Definiciones de pines de las borneras
alias bornera_1 is pin_b6
alias bornera_2 is pin_e3
alias bornera_3 is pin_c0
; definir dirección de dichos pines. ATENCIÓN: E.3 SÓLO PUEDE SER ENTRADA DIGITAL!!!
pin_b6_direction = input
pin_c0_direction = input


; -----------------------------------------------------------
; setup rs-232 x hardware mediante la cual el PIC se comunica con el ESP8266
const serial_hw_baudrate  = 115200         ; velocidad para comunicarse con el ESP
include serial_hardware
serial_hw_init()
; -----------------------------------------------------------
; Protocolo I2C implementado por software, RTC y sensor presión BMP180, en ESTA plaqueta
alias i2c_scl            is pin_d2
alias i2c_scl_direction  is pin_d2_direction
alias i2c_sda            is pin_d3
alias i2c_sda_direction  is pin_d3_direction
const word _i2c_bus_speed = 1 ; * 100kHz
include i2c_software
i2c_initialize()
; -----------------------------------------------------------
; Seteos de pines para el LCD, en ESTA plaqueta
const byte LCD_ROWS   = 2     ; 2 líneas
const byte LCD_CHARS  = 16    ; 16 chars por línea
alias  lcd_rs  is  pin_b4     ; cmd/data select
alias  lcd_en  is  pin_b5     ; enable

alias  lcd_d4       is  pin_e1  ; lcd databit d4
alias  lcd_d5       is  pin_b1  ; lcd databit d5
alias  lcd_d6       is  pin_b2  ; lcd databit d6
alias  lcd_d7       is  pin_b3  ; lcd databit d7

pin_b5_direction = output
pin_b4_direction = output
pin_b3_direction = output
pin_b2_direction = output
pin_b1_direction = output
pin_e1_direction = output

include lcd_hd44780_4
lcd_init()

; -----------------------------------------------------------
; librería SPI
include spi_master_hw
; definir pines SPI
pin_sdi_direction = input    ; spi input
pin_sdo_direction = output   ; spi output
pin_sck_direction = output   ; spi clock
spi_init(SPI_MODE_11,SPI_RATE_FOSC_4) ; modo SPI, para la SD
alias spi_master is spi_master_hw
; setear pin cs SD
alias sd_chip_select is pin_d5
alias sd_chip_select_direction is pin_d5_direction
sd_chip_select = high
sd_chip_select_direction = output
alias sd_force_spi_mode is spi_master_hw_set_mode_11 -- always set spi mode to 1,1
const bit SD_ALWAYS_SET_SPI_MODE = TRUE
const bit SD_DELAY_AFTER_WRITE = TRUE
include sd_card
sd_init()
; -----------------------------------------------------------
-- setup fat32 --
-- include the required files
-- change these vaues to save memory
const bit FAT32_WRITE_LONG_FILE_NAMES = FALSE -- support writing of long file names
const word FAT32_FILES_MAX = 20            -- the max number of files allowed in a directory
const byte FAT32_FILE_NAME_SIZE = 80        -- choose max file_name size. if a file_name is longer the this, beginning chars will be cut. short file_names are 12 bytes.
const FAT32_DIR_FRAGMENTS_TO_ALLOW = 5     -- uses 6 bytes memory per fragment allowed (0 not allowed)
--                                          -- windows defrag does not defragment directories.
const FAT32_FILE_FRAGMENTS_TO_ALLOW = 5    -- uses 8 bytes memory per fragment allowed (0 not allowed)
--
-- experts may change the following values
;const byte FAT32_ENTRIES_MAX = 1           -- highest file entry address can be 256
const byte FAT32_ENTRIES_MAX = 2            -- highest file entry address can be 65535
const bit FAT32_USE_INTERNAL_MEMORY = TRUE -- Usar memoria interna para la lista de archivos
IF FAT32_USE_INTERNAL_MEMORY == TRUE THEN
   -- Setup a large array for storing sector data, This is where file_name locations are stored
   const dword LARGE_ARRAY_2_SIZE = FAT32_FILES_MAX               -- choose number of array variables
   const dword LARGE_ARRAY_2_VARIABLE_SIZE = FAT32_ENTRIES_MAX    -- choose bytes size of variables
   include large_array_2                    -- include the array library
   ALIAS fat32_entry_location is large_array_2
END IF
include fat32
; -----------------------------------------------------------
; -----------------------------------------------------------
delay_1ms(10)
spi_init(SPI_MODE_00,SPI_RATE_FOSC_4) ; <----- SETEOS PARA EL nRF24L01, ATENCIÓN!!!!!!!!!!!!!!
alias nrf24_ce_pin is pin_c2                        ; C.2 maneja al pin CE del módulo
alias nrf24_ce_pin_direction is pin_c2_direction
nrf24_ce_pin_direction = output
alias nrf24_csn_pin is pin_c1                        ; C.1 maneja al pin CSN del módulo
alias nrf24_csn_pin_direction is pin_c1_direction
nrf24_csn_pin_direction = output
alias spi_master_exchange is spi_master_hw_exchange
nrf24_ce_pin = low
nrf24_csn_pin = high
delay_1ms(10)
alias nrf24_irq_pin is pin_b0                        ; B.0 recibe la salida IRQ del módulo
alias nrf24_irq_pin_direction is pin_b0_direction
nrf24_irq_pin_direction = input
const byte tamanio_rf_data = 26      ; definir el tamaño del arreglo, debe ser IGUAL en el otro firmware (Tx y/o Rx)
include nrf24l01_traducido_desde_C_v3
; -----------------------------------------------------------
; -----------------------------------------------------------
; Definiciones para el bus dallas one-wire, que es el protocolo del sensor de temperatura DS18b20
alias d1w_bus            is pin_a4
alias d1w_bus_direction  is pin_a4_direction
include one_wire
d1w_init()               ; inicializar bus one-wire
; seleccionar temperatura en formato Celsius
const ds18b20_value_raw          = 0
const ds18b20_value_celcius      = 1
const ds18b20_value_farenheit    = 0

const ds18b20_ignore_crc         = 0 ; 1 tell lib to ignore crc (code becomes smaller and faster, but reliability of data is less)
const ds18b20_max_retries        = 1 ; 1 means the library re-reads once when crc fails, 4 means up to 4 retries (so max 5 reads)
; incluir la libreria para el sensor ds18b20 de temperatura
include ds18b20
; -----------------------------------------------------------
; librería para acceder al sensor de humedad (y temperatura) AM2302
const bit USE_DHT22 = true
alias pin_dht11 is pin_a3
alias pin_dht11_direction is pin_a3_direction
include temperature_humidity_dht11
; -----------------------------------------------------------
; librería para acceder al sensor de presión (y temperatura) BMP180
include bmp085
; -----------------------------------------------------------
; -----------------------------------------------------------
; COMANDOS AT para ESP8266, que permiten comunicarse con el server FTP
; Seteos de base
const byte reset[] = "AT+RST\r\n"                 ; reset del módulo
const byte setear_modo[] = "AT+CWMODE=3\r\n"      ; setear modo cliente (no AP)
const byte setear_dhcp[] = "AT+CWDHCP=2,1\r\n"    ; activar servidor DHCP interno
const byte setear_mux[] = "AT+CIPMUX=1\r\n"       ; multiconexión
; establece enlace TCP con el server ftp
const byte iniciar_comunicacion[] = "AT+CIPSTART=4,"
const byte tcp[] = "TCP"
const byte ip_servidor[] = "192.168.4.2"
const byte puerto_servidor[] = ",9090\r\n"
; envía comandos USER y PASS
const byte enviar_USER_PASS[] = "AT+CIPSEND=4,11\r\n"
const byte usuario[] = "USER user\r\n"
const byte contrasenia[] = "PASS pass\r\n"
; abre un puerto local
const byte puerto_datos_ftp[] = "AT+CIPSERVER=1,1027\r\n"    ; activar el puerto de datos local de la conexión FTP
; reporta al server FTP sobre el puerto local
const byte enviar_PORT[] = "AT+CIPSEND=4,22\r\n"
const byte PORT[]="PORT 192,168,4,1,4,3\r\n\r\n"
; envía nombre de archivo al server ftp
const byte comando_nombre_archivo[] = "AT+CIPSEND=4,19\r\n"
const byte enviar_STOR[]= "STOR "
const byte fin_linea_stor[] = "\r\n\r\n"
; para enviar tamaño del archivo al server ftp
const byte enviar_datos[] = "AT+CIPSEND=0,"
const byte cierre_string[] = "\r\n"
; cierra las conexiones establecidas antes
const byte cierra_conexion_datos[] = "AT+CIPCLOSE=0\r\n"
const byte cierra_conexion_comandos[] = "AT+CIPCLOSE=4\r\n"
; -----------------------------------------------------------
var word humedad = 0
var byte resultado = 0
var bit resul = 0
var byte signo
var sword temperatura = 0
var sword temperaturaP = 0
var dword presion = 0

var word resul_rf
var byte ind = 0

var byte anio
var byte mes
var byte dia
var byte hora
var byte minuto
var byte segundo

var byte file_number = 1
var dword step1
var word step2

const byte mensaje_listo[] = "Listo!"

; -----------------------------------------------------------
procedure leer_rtc ( byte in ad, byte out digi1, byte out digi0 ) is
   var byte dato_rtc = 0
   var byte loc = 0
   var byte loc2 = 0
   var bit resul = false
   ;------------
   I2C_start()
   ; se envía la ID del RTC con LSB en 0...
   resul = i2c_transmit_byte(0b1101_0000)
   ; y luego el número de registro deseado...
   resul = i2c_transmit_byte(ad)
   I2C_stop()
   ;------------
   I2C_start()
   ; con el LSB de la ID del RTC en 1, se pide una lectura...
   resul = i2c_transmit_byte(0b1101_0001)
   ; y se recibe el contenido del registro pedido antes...
   dato_rtc = I2C_receive_byte( false )
   I2C_stop()
   ;------------
   loc = dato_rtc
   loc2 = dato_rtc
   loc = loc & 0xF0    ; 0xF0 = 0b11110000, separa nibble alto
   digi1 = loc / 16
   digi0 = loc2 & 15   ; 15 = 0b00001111, separa nibble bajo
end procedure
procedure obtener_fecha_hora is
   var byte digito1 = 0
   var byte digito0 = 0
   delay_1ms(5)
   leer_rtc(6,digito1,digito0)
   digito1 = digito1 * 10
   anio = digito1 + digito0
   ; ---------------------------
   leer_rtc(5,digito1,digito0)
   digito1 = digito1 * 10
   mes = digito1 + digito0
   ; ---------------------------
   leer_rtc(4,digito1,digito0)
   digito1 = digito1 * 10
   dia = digito1 + digito0
   ; ---------------------------
   leer_rtc(2,digito1,digito0)
   digito1 = digito1 * 10
   hora = digito1 + digito0
   ; ---------------------------
   leer_rtc(1,digito1,digito0)
   digito1 = digito1 * 10
   minuto = digito1 + digito0
   ; ---------------------------
   leer_rtc(0,digito1,digito0)
   digito1 = digito1 * 10
   segundo = digito1 + digito0
end procedure
procedure writertc ( byte in ad , byte in d ) is
   var bit res

   i2c_start
   res = i2c_transmit_byte ( 0b11010000 ) ; ID modo escritura
   res = i2c_transmit_byte ( ad )		; dirección registro a escribir
   res = i2c_transmit_byte ( d ) 		; poner dato en registro
   i2c_stop
end procedure
procedure escribir_rtc ( byte in ad , byte in d ) is
   ; Codificar el dato binario a formato BCD, en que
   ; almacena los datos el RTC.
   var byte loc
   loc = d
   loc = loc / 10
   loc = loc * 16
   d = d % 10
   loc = loc + d
   d = loc
   writertc ( ad , d )
end procedure

; -----------------------------------------------------------
; Obtener temperatura del sensor DS18B20
function leer_temperatura return sword is
   var bit r
   var sword temp
   ds18b20_convert()
   r = ds18b20_s_temp(temp)
   return temp
end function
; --------------------------------------------------------------

procedure envio_wifi is
; Seteos iniciales del módulo WiFi
print_string(serial_hw_data,setear_modo)
delay_100ms(10)   ; acá debería volver un OK
print_string(serial_hw_data,setear_dhcp)
delay_100ms(10)   ; acá debería volver un OK
print_string(serial_hw_data,setear_mux)
delay_100ms(10)   ; acá debería volver un OK
; --------------------------------------------
print_string(serial_hw_data,puerto_datos_ftp)     ; activar puerto de datos local
delay_100ms(5)
print_string(serial_hw_data,iniciar_comunicacion)
serial_hw_data = 34   ; mandamos una comilla
print_string(serial_hw_data,tcp)
serial_hw_data = 34   ; mandamos una comilla
serial_hw_data = ","
serial_hw_data = 34   ; mandamos una comilla
print_string(serial_hw_data,ip_servidor)
serial_hw_data = 34   ; mandamos una comilla
print_string(serial_hw_data,puerto_servidor)
delay_100ms(30)           ; espera más larga para que se establezca el enlace TCP con el servidor FTP

print_string(serial_hw_data,enviar_USER_PASS)         ; enviar comando de nombre de usuario o contraseña al servidor
delay_100ms(5)
print_string(serial_hw_data,usuario)         ; enviar EL nombre de usuario al servidor
delay_100ms(5)

print_string(serial_hw_data,enviar_USER_PASS)     ; enviar comando de nombre de usuario o contraseña al servidor
delay_100ms(5)
print_string(serial_hw_data,contrasenia)     ; enviar LA contraseña de usuario al servidor
delay_100ms(5)

print_string(serial_hw_data,enviar_PORT)          ; indica que va a salir el comando de PORT
delay_100ms(5)
print_string(serial_hw_data,PORT)                 ; y acá va el comando, hacia el servidor remoto
delay_100ms(30)

print_string(serial_hw_data,comando_nombre_archivo)
delay_100ms(20)
; Las siguientes 5 líneas arman y envían el nombre corto del archivo (formato DOS, 8.3)
print_string(serial_hw_data,enviar_STOR)
print_string(serial_hw_data,fat32_short_file_name)
serial_hw_data = "."
print_string(serial_hw_data,fat32_file_extension)
print_string(serial_hw_data,fin_linea_stor)
delay_100ms(10)

; El siguiente bloque toma el tamaño del archivo, lo convierte a ASCII y lo manda al ESP8266
print_string(serial_hw_data,enviar_datos)
print_dword_dec(serial_hw_data, fat32_file_size)
print_string(serial_hw_data,cierre_string)       ; terminar con CRLF
delay_100ms(10)

; Leer datos del archivo y enviar.
; Acá se calcula cuántos sectores ocupa el archivo.
var dword sectors_available
if (fat32_file_size) == (fat32_file_size / 512) * 512 then
   sectors_available = (fat32_file_size / 512)
else
   sectors_available = (fat32_file_size / 512) + 1
end if

; Leer contenido archivo y enviar
if fat32_file_open(file_number) != 1 then   ; file open devuelve 1 si tuvo éxito
;          print_string(lcd,error1)
end if
; enviar los datos contenidos en el archivo, byte a byte, dentro de cada sector
for sectors_available using step1 loop
   ; Leer UN sector del dispositivo (SD en este caso)
   fat32_read_file_sector_number(step1)
   ; Enviar el contenido del sector al ESP8266
   for 512 using step2 loop
      serial_hw_data = fat32_sector_buffer[step2]
   end loop
end loop
fat32_file_close()                      ; se debe cerrar el archivo!!
delay_100ms(5)
print_string(serial_hw_data,cierra_conexion_datos)     ; en este punto el servidor remoto graba los datos y cierra el archivo
delay_100ms(5)

print_string(serial_hw_data,cierra_conexion_comandos)  ; terminar todo el proceso.
delay_100ms(5)
end procedure
; ---------------------------------------------



; =========================================================================================================================

zumbador = on
testigo = on
delay_100ms(5)
zumbador = off
testigo = off

; esta instrucción lee del BMP180 valores de calibración FUNDAMENTALES para la calidad de la medida
bmp085_init(resul)
; Hacer dos lectura DUMMY del sensor de temperatura pues por motivos desconocidos la 1ra/2da lectura es SIEMPRE errónea.
temperatura = leer_temperatura
delay_100ms(5)
temperatura = leer_temperatura
delay_100ms(5)
; --------------------------------------------
spi_init(SPI_MODE_00,SPI_RATE_FOSC_4) ; <----- SETEOS PARA EL nRF24L01
nrf24_csn_pin_direction = output      ; PARA CORREGIR FUNCIONAMIENTO ANÓMALO
delay_1ms(5)
RF_CONFIG(0x40,10)                    ; Configurar módulo RF (canal y dirección).
RF_ON()                               ; Activar el módulo RF.
delay_1ms(5)
nrf24_csn_pin_direction = output     ; PARA CORREGIR FUNCIONAMIENTO ANÓMALO
delay_100ms(10)
; --------------------------------------------
lcd_clear_screen
print_string(lcd,mensaje_listo)
; --------------------------------------------
spi_init(SPI_MODE_11,SPI_RATE_FOSC_4) ; modo SPI, para la SD
delay_1ms(5)

fat32_init(1)     ; inicializar librería fat32, 1ra partición primaria, directorio raíz "\"
; leer info del archivo
fat32_read_file_info(1)



forever loop

   ; Sensores
   ; leer sensor de temperatura
   temperatura = leer_temperatura
   ; leer sensor de temperatura y humedad
   resultado = dht11_read()
   ; leer sensor de presión
   bmp085_return_temperature_and_pressure(2,temperaturaP,presion,resul)


   ; Transmitir algo usando el nRF24l01
   rf_data[0] = ind
   ind = ind + 1
   RF_DIR = 9
   resul_rf = RF_SEND()
   testigo = !testigo


   ; envío archivo via WiFi
   envio_wifi


end loop

