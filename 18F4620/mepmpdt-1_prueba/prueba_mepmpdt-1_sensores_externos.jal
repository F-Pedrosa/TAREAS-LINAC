; Firmware para la prueba del hardware de la mepmpdt-1
include 18f4620

pragma target clock 20_000_000
pragma target PWRTE  enabled          ; power up timer enabled
pragma target OSC      HS             ; crystal or resonator
pragma target WDT      CONTROl        ; watchdog
pragma target XINST    DISABLED       ; extended instruction set
pragma target DEBUG    DISABLED       ; debugging
pragma target BROWNOUT DISABLED       ; brownout reset
pragma target FCMEN    DISABLED       ; clock monitoring
pragma target IESO     DISABLED       ; int/ext osc. switch
pragma target LVP      DISABLED       ; low voltage programming
pragma target MCLR     INTERNAL       ; E.3 habilitado

WDTCON_SWDTEN = OFF                 ; disable WDT
OSCCON_SCS = 0                      ; select primary oscillator
OSCTUNE_PLLEN = FALSE               ; no PLL

enable_digital_io()                   ; todos los pines como I/O digitales en el arranque

; Interfaz serial por hardware (también usada por el módulo USB-RS232)
const serial_hw_baudrate = 57_600
include serial_hardware
serial_hw_init()

; -----------------------------------------------------------
; Protocolo I2C implementado por software, sensor de presión.
alias i2c_scl            is pin_d6
alias i2c_scl_direction  is pin_d6_direction
alias i2c_sda            is pin_d5
alias i2c_sda_direction  is pin_d5_direction
const word _i2c_bus_speed = 1 ; * 100kHz
include i2c_software
i2c_initialize()
; -----------------------------------------------------------
; librería para acceder al sensor de humedad (y temperatura) AM2302
const bit USE_DHT22 = true
alias pin_dht11 is pin_b1
alias pin_dht11_direction is pin_b1_direction
include temperature_humidity_dht11
; -----------------------------------------------------------
; librería para acceder al sensor de presión (y temperatura) BMP180
include bmp085
; -----------------------------------------------------------
alias testigo is pin_c1
pin_c1_direction = output

alias zumbador is pin_d4
pin_d4_direction = output


var word humedad = 0
var byte resultado = 0
var sword temperaturaP = 0
var dword presion = 0
var bit resul = 0

; Arreglos para poder dividir los words y dwords en bytes individuales
; Humedad/Temperatura
var byte bytes_dht11_temperature[2] at dht11_temperature
var byte bytes_dht11_humidity[2] at dht11_humidity

; Presión/Temperatura
var byte bytes_presion[4] at presion
var byte bytes_temperaturaP[2] at temperaturaP

; -------------------------------------------------------------------------------------------------
;procedure escribir_trama_eeprom_de_prueba( byte in eepr_pos, word in address) is
;
;   var byte AX[2] at address
;   var bit resul
;
;   i2c_start()
;
;   resul = i2c_transmit_byte(eepr_pos)
;   resul = i2c_transmit_byte(AX[1])
;   resul = i2c_transmit_byte(AX[0])
;
;   resul = i2c_transmit_byte(bytes_dht11_temperature[0])
;   resul = i2c_transmit_byte(bytes_dht11_temperature[1])
;
;   resul = i2c_transmit_byte(bytes_dht11_humidity[0])
;   resul = i2c_transmit_byte(bytes_dht11_humidity[1])
;
;   resul = i2c_transmit_byte(bytes_presion[0])
;   resul = i2c_transmit_byte(bytes_presion[1])
;   resul = i2c_transmit_byte(bytes_presion[2])
;   resul = i2c_transmit_byte(bytes_presion[3])
;
;   resul = i2c_transmit_byte(bytes_temperaturaP[0])
;   resul = i2c_transmit_byte(bytes_temperaturaP[1])
;
;   ; 6 bytes dummy por el tema de la escritura por página (múltiplos de 8)
;   resul = i2c_transmit_byte(0)
;   resul = i2c_transmit_byte(0)
;   resul = i2c_transmit_byte(0)
;   resul = i2c_transmit_byte(0)
;   resul = i2c_transmit_byte(0)
;   resul = i2c_transmit_byte(0)
;
;   i2c_stop()
;
;   direccion = direccion + 16
;
;   delay_1ms(4)
;
;end procedure

procedure dword2digits(byte out dig9,byte out dig8,byte out dig7,byte out dig6,byte out dig5,byte out dig4, byte out dig3, byte out dig2, byte out dig1, byte out dig0, dword in numero ) is
   const dword c1_000_000_000    = 1_000_000_000
   const dword c100_000_000      = 100_000_000
   const dword c10_000_000       = 10_000_000
   const dword c1_000_000        = 1_000_000
   const dword c100_000          = 100_000
   const word  c10_000           = 10_000
   const word  c1000             = 1000
   const word  c100              = 100
   const word  c10               = 10

   dig9 = byte(numero / c1_000_000_000)
   numero  = numero % c1_000_000_000
   dig8 = byte(numero / c100_000_000)
   numero  = numero % c100_000_000
   dig7 = byte(numero / c10_000_000)
   numero  = numero % c10_000_000
   dig6 = byte(numero / c1_000_000)
   numero  = numero % c1_000_000
   dig5 = byte(numero / c100_000)
   numero  = numero % c100_000
   dig4 = byte(numero / c10_000)
   numero  = numero % c10_000
   dig3 = byte(numero / c1000)
   numero  = numero % c1000
   dig2 = byte(numero / c100)
   numero  = numero % c100
   dig1 = byte(numero / c10)
   numero  = numero % c10
   dig0 = byte(numero)
end procedure

procedure word2digits( byte out dig4,byte out dig3, byte out dig2, byte out dig1, byte out dig0, word in numero ) is
    const word c10000 = 10000
    const word c1000 = 1000
    const word c100 = 100
    const word c10 = 10

    dig4 = byte(numero / c10000)
    numero = numero % c10000
    dig3 = byte(numero / c1000)
    numero = numero % c1000
    dig2 = byte(numero / c100)
    numero = numero % c100
    dig1 = byte(numero / c10)
    numero = numero % c10
    dig0 = byte(numero)
end procedure

procedure sword2digits(byte out signo,byte out dig4, byte out dig3, byte out dig2, byte out dig1, byte out dig0, sword in numero ) is
    const word c10000 = 10000
    const word c1000 = 1000
    const word c100 = 100
    const word c10 = 10
    var word num
    var bit sign at numero:15

    if sign then
       signo = "-"
       numero = -numero
    else
       signo = " "
    end if

    num = word(numero)
    dig4 = byte(num / c10000)
    num = num % c10000
    dig3 = byte(num / c1000)
    num = num % c1000
    dig2 = byte(num / c100)
    num = num % c100
    dig1 = byte(num / c10)
    num = num % c10
    dig0 = byte(num)
end procedure


; =========================================================================================================================

testigo = on
zumbador = on
delay_100ms(1)
testigo = off
zumbador = off

bmp085_init(resul)

delay_100ms(10)

var byte digi9 = 0
var byte digi8 = 0
var byte digi7 = 0
var byte digi6 = 0
var byte digi5 = 0
var byte digi4 = 0
var byte digi3 = 0
var byte digi2 = 0
var byte digi1 = 0
var byte digi0 = 0
var byte signo

forever loop

   resultado = dht11_read()
   word2digits(digi4,digi3,digi2,digi1,digi0,dht11_temperature)
   serial_hw_data = digi3 + 48
   serial_hw_data = digi2 + 48
   serial_hw_data = digi1 + 48
   serial_hw_data = "."
   serial_hw_data = digi0 + 48
   serial_hw_data = "C"
   serial_hw_data = " "
   word2digits(digi4,digi3,digi2,digi1,digi0,dht11_humidity)
   serial_hw_data = digi3 + 48
   serial_hw_data = digi2 + 48
   serial_hw_data = digi1 + 48
   serial_hw_data = "."
   serial_hw_data = digi0 + 48
   serial_hw_data = "%"
   serial_hw_data = " "
   ; leer y mostrar la salida del sensor de presión
   bmp085_return_temperature_and_pressure(2,temperaturaP,presion,resul)
   dword2digits(digi9,digi8,digi7,digi6,digi5,digi4,digi3,digi2,digi1,digi0,presion)
   serial_hw_data = digi4 + 48
   serial_hw_data = digi3 + 48
   serial_hw_data = digi2 + 48
   serial_hw_data = "."
   serial_hw_data = digi1 + 48
   serial_hw_data = digi0 + 48
   serial_hw_data = "h"
   serial_hw_data = "P"
   serial_hw_data = "a"
   sword2digits(signo,digi4,digi3,digi2,digi1,digi0,temperaturaP)
   serial_hw_data = signo
   serial_hw_data = digi3 + 48
   serial_hw_data = digi2 + 48
   serial_hw_data = digi1 + 48
   serial_hw_data = digi0 + 48

   serial_hw_data = 13
   serial_hw_data = 10

   delay_100ms(30)                 ; cada 3 segundos
   zumbador = on
   delay_100ms(1)
   zumbador = off

end loop

