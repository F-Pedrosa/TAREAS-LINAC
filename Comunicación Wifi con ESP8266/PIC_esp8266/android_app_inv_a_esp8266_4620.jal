; Firmware que lee archivo desde una SD y lo envía via ESP8266 a un servidor FTP en un cel Android

include 18f4620

pragma target clock 20_000_000
pragma target PWRTE  enabled          ; power up timer enabled
pragma target OSC      HS             ; crystal or resonator
pragma target WDT      CONTROl        ; watchdog
pragma target XINST    DISABLED       ; extended instruction set
pragma target DEBUG    DISABLED       ; debugging
pragma target BROWNOUT DISABLED       ; brownout reset
pragma target FCMEN    DISABLED       ; clock monitoring
pragma target IESO     DISABLED       ; int/ext osc. switch
pragma target LVP      DISABLED       ; low voltage programming
pragma target MCLR     INTERNAL       ; E.3 habilitado
WDTCON_SWDTEN = OFF                   ; disable WDT
OSCCON_SCS = 0                        ; select primary oscillator
OSCTUNE_PLLEN = FALSE                 ; no PLL
enable_digital_io()                   ; todos los pines como I/O digitales en el arranque

_usec_delay(100_000) -- wait for power to settle

include delay

; para comunicarse con el módulo 8266
const serial_hw_baudrate  = 115200
include serial_hardware
serial_hw_init()
; necesario para manejo de strings
include print
include strings


alias serial_sw_tx_pin     is  pin_d1
alias serial_sw_rx_pin     is  pin_d0
pin_d1_direction = output
pin_d0_direction = input
const serial_sw_baudrate = 115_200
include serial_software
serial_sw_init()



; ---------------------------------------------------------------------------------------------------------------
var byte cadena[255]
var byte cadena2[10] = {0,0,0,0,0,0,0,0,0,0}
var byte dato = 0
var bit terminado = false
var bit arroba = false
var bit comienzo = false
var byte i = 0
var byte x = 0
var byte final = 0
var byte inicio = 0
var byte caracter = 0



alias led_rojo is pin_b7
pin_b7_direction = output

; COMANDOS AT para el módulo
; Seteos de base
const byte reset[] = "AT+RST\r\n"                 ; reset del módulo
const byte setear_modo[] = "AT+CWMODE=3\r\n"      ; setear modo mixto, AP y cliente
const byte setear_dhcp[] = "AT+CWDHCP=2,1\r\n"    ; activar servidor DHCP interno
const byte setear_mux[] = "AT+CIPMUX=1\r\n"
const byte setear_time_out[] = "AT+CIPSTO=3\r\n"       ; timeout a los 2 segundos
; abre un puerto local
const byte puerto_local[] = "AT+CIPSERVER=1,80\r\n"    ; activar el puerto local
const byte cerrar_conexion[] = "AT+CIPSHUT=0\r\n"

const byte led_on[] = "LED ON"
const byte led_off[] = "LED OFF"

; ===============================================================================================================

led_rojo = on
delay_100ms(10)
led_rojo = off

; inicializar a 0 el arreglo que guardará los caracteres que vienen desde el ESP8266
for 254 using i loop
   cadena[i] = 0
end loop


; ---------------------------------------------
; Seteos iniciales del módulo WiFi
delay_100ms(10)   ; esperamos 1 seg para que se termine de iniciar correctamente el módulo 8266
print_string(serial_hw_data,setear_modo)
delay_100ms(5)   ; acá debería volver un OK
print_string(serial_hw_data,setear_dhcp)
delay_100ms(5)   ; acá debería volver un OK
print_string(serial_hw_data,setear_mux)
delay_100ms(5)   ; acá debería volver un OK
print_string(serial_hw_data,puerto_local)
delay_100ms(5)   ; acá debería volver un OK
print_string(serial_hw_data,setear_time_out)
delay_100ms(5)   ; acá debería volver un OK
; --------------------------------------------


serial_sw_data = "O"
serial_sw_data = "K"
serial_sw_data = 13
serial_sw_data = 10


forever loop
  ; si llegan bytes serialmente desde el ESP8266, evaluarlos
  if serial_hw_read(dato) then
     if dato == "+" then          ; los strings con datos comienzan con "+IPD......"
        comienzo = true
     end if

     if comienzo == true then
        if dato == "#" then          ; si llega el numeral, terminó el string importante
           terminado = true
           comienzo = false
           final = i                 ; la cantidad de caracteres recibidos...
        else                         ; si no, agregar caracter al string
           cadena[i] = dato
           i = i + 1
           if i == 254 then          ; si son más de 255 terminar para que no haya overflow
              i = 0
              comienzo = false
           end if
        end if
     end if

  end if

  ; como ya llegó el #, ahora buscar la posición de la @ para luego comparar
  ; el string resultante desde esa posición.
  if terminado == true then
     terminado = false
     comienzo = false
     x = final
     while caracter != "@" loop
           caracter = cadena[x]
           x = x - 1
     end loop

;     inicio = x
;     while x <= final loop
;           serial_sw_data = cadena[x]
;           x = x + 1
;     end loop

     final = final - 1
     if cadena[final] == "N" then
        led_rojo = on
     end if
     if cadena[final] == "F" then
        led_rojo = off
     end if

     x = 0
     i = 0
     inicio = 0
     final = 0
     
     for 254 using x loop                ; limpiar string
         cadena[x] = 0
     end loop
  end if

end loop






