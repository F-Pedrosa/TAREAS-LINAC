;Firm para prueba envío archivo via WiFi entre módulo 8266+PIC  18F4620 y celular android con servidor FTP

include 18f4620

pragma target clock 20_000_000
pragma target PWRTE  enabled          ; power up timer enabled
pragma target OSC      HS             ; crystal or resonator
pragma target WDT      CONTROl        ; watchdog
pragma target XINST    DISABLED       ; extended instruction set
pragma target DEBUG    DISABLED       ; debugging
pragma target BROWNOUT DISABLED       ; brownout reset
pragma target FCMEN    DISABLED       ; clock monitoring
pragma target IESO     DISABLED       ; int/ext osc. switch
pragma target LVP      DISABLED       ; low voltage programming
pragma target MCLR     INTERNAL       ; E.3 habilitado
WDTCON_SWDTEN = OFF                 ; disable WDT
OSCCON_SCS = 0                      ; select primary oscillator
OSCTUNE_PLLEN = FALSE               ; no PLL
enable_digital_io()                   ; todos los pines como I/O digitales en el arranque
include delay

include print
include strings

; para comunicarse con el módulo 8266
const serial_hw_baudrate = 115_200
include serial_hardware
serial_hw_init()

;; -----------------------------------------------------------
;; Seteos de pines para el LCD
;const byte LCD_ROWS   = 2     ; 2 líneas
;const byte LCD_CHARS  = 16    ; 16 chars por línea
;alias  lcd_rs  is  pin_a4     ; cmd/data select
;alias  lcd_en  is  pin_b0     ; enable
;
;alias  lcd_d4       is  pin_a0  ; lcd databit d4
;alias  lcd_d5       is  pin_a1  ; lcd databit d5
;alias  lcd_d6       is  pin_a2  ; lcd databit d6
;alias  lcd_d7       is  pin_a3  ; lcd databit d7
;
;pin_a0_direction = output
;pin_a4_direction = output
;pin_a3_direction = output
;pin_a2_direction = output
;pin_a1_direction = output
;pin_b0_direction = output
;include lcd_hd44780_4
;lcd_init()


;; setup spi e inclusión librería spi (el hardware para comunicarse con la SD)
;;include spi_master_hw
;include spi_master_hw
;spi_init(SPI_MODE_11,SPI_RATE_FOSC_64) ; <----- SETEOS PARA LA SD, ATENCIÓN!!!!!!!!!!!!!!
;; definir entradas/salidas spi (no hay mucha alternativa, las fija el hard, excepto a ChipSelect)
;pin_sdi_direction = input    ; entrada datos spi
;pin_sdo_direction = output   ; salida datos spi
;pin_sck_direction = output   ; clock spi (salida)
;; definición del pin chip select
;alias sd_chip_select             is pin_d2           ; CS de la SD!!
;alias sd_chip_select_direction   is pin_d2_direction
;;sd_chip_select_direction = output    ; pin chip select como salida
;;sd_chip_select = low                 ; arrancar con chip select en 0
;-- setup the sd card pins
;sd_chip_select = high
;sd_chip_select_direction = output
;
;; setup the sd card library
;alias sd_force_spi_mode is spi_master_hw_set_mode_11 -- always set spi mode to 1,1
;const bit SD_DELAY_AFTER_WRITE = FALSE
;include sd_card              -- include the sd card ide hard disk library
;sd_init()                    -- initialize startup settings

; -----------------------------------------------------------
alias spi_master_sw_sdi              is pin_c4
alias spi_master_sw_sdi_direction    is pin_c4_direction
alias spi_master_sw_sdo              is pin_c5
alias spi_master_sw_sdo_direction    is pin_c5_direction
alias spi_master_sw_sck              is pin_c3
alias spi_master_sw_sck_direction    is pin_c3_direction
spi_master_sw_sdi_direction = input    -- spi input
spi_master_sw_sdo_direction = output   -- spi output
spi_master_sw_sck_direction = output   -- spi clock
include spi_master_sw
alias spi_master_hw is spi_master_sw
alias spi_master_hw_exchange is spi_master_sw_exchange

alias spi_master_set_mode is spi_master_sw_set_mode
alias spi_master_set_speed is spi_master_sw_set_speed

spi_master_sw_init(SPI_MODE_11)    ; init spi,  MODE 11 para la SD
; -----------------------------------------------------------
; definición del pin chip select
alias sd_chip_select             is pin_d2           ; CS de la SD!!
alias sd_chip_select_direction   is pin_d2_direction
sd_chip_select_direction = output    ; pin chip select como salida
sd_chip_select = low                 ; arrancar con chip select en 0
const bit SD_DELAY_AFTER_WRITE = TRUE
const bit sd_force_spi_mode = true
;incluir librería sd card
include sd_card
sd_init()       ; inicializar la tarjeta sd



-- setup fat32 --
const FAT32_SMALL_SMALL_VERSION  = TRUE          -- use the small version of fat32
const FAT32_SMALL_VOL_ID[11]     = "TARJETA SD " -- 11 byte volume id (name of partition)
const FAT32_SMALL_FILE_NAME[8]   = "PRUEBA01"    -- 8 byte file name (name of the 1 file allowed)
const FAT32_SMALL_FILE_EXT[3]    = "TXT"         -- 3 byte file extension (extension of the 1 file allowed)
const FAT32_SMALL_MAX_FILE_SIZE  = 50000        -- max file size
const byte FAT32_SMALL_ATTRIBUTE = 0x20          -- the file attributes
--
include fat32_small   -- include small fat32 library


; REFERENCIA COMANDOS
      ;AT+CWMODE=3
      ;AT+CWDHCP=2,1
      ;AT+CIPMUX=1
      ;AT+CIPSTART=4,"TCP","xx.xx.xx.xx",puerto
      ;AT+CIPSEND=4,9
      ;   > USER user
      ;AT+CIPSEND=4,9
      ;  > PASS pass
      ;AT+CIPSERVER=1,1027
      ;AT+CIPSEND=4,20
      ;  > PORT xx,xx,xx,xx,4,3
      ;AT+CIPSEND=4,13
      ;  > STOR test.txt
      ;AT+CIPSEND=0,4
      ;  > abcd
      ;AT+CIPCLOSE=0
      ;AT+CIPCLOSE=4

const byte mensaje_ok[] = "OK!"

; COMANDOS AT para el módulo, que permiten comunicarse con el server FTP
const byte reset[] = "AT+RST\r\n"      ; setear modo cliente (no AP)
const byte setear_modo[] = "AT+CWMODE=3\r\n"      ; setear modo cliente (no AP)
const byte setear_dhcp[] = "AT+CWDHCP=2,1\r\n"    ; activar servidor DHCP interno
const byte setear_mux[] = "AT+CIPMUX=1\r\n"       ; multiconexión

const byte iniciar_comunicacion[] = "AT+CIPSTART=4,"
const byte tcp[] = "TCP"
const byte ip_servidor[] = "192.168.4.2"
const byte puerto_servidor[] = ",9090\r\n"

const byte enviar_USER_PASS[] = "AT+CIPSEND=4,11\r\n"
const byte usuario[] = "USER user\r\n"
const byte contrasenia[] = "PASS pass\r\n"

const byte puerto_datos_ftp[] = "AT+CIPSERVER=1,1027\r\n"    ; activar el puerto de datos local de la conexión FTP

const byte enviar_PORT[] = "AT+CIPSEND=4,22\r\n"
const byte PORT[]="PORT 192,168,4,1,4,3\r\n\r\n"

const byte enviar_LIST[] = "AT+CIPSEND=4,4\r\n"
const byte comando_listar[] = "LIST\r\n\r\n"

const byte enviar_nombre_archivo[] = "AT+CIPSEND=4,15\r\n"
const byte comando_nombre[]= "STOR 0001.txt\r\n\r\n"
const byte enviar_datos[] = "AT+CIPSEND=0,4\r\n"
const byte datos_dummy[] = "abcd\r\n\r\n"

const byte cierra_conexion_datos[] = "AT+CIPCLOSE=0\r\n"
const byte cierra_conexion_comandos[] = "AT+CIPCLOSE=4\r\n"





alias led_rojo is pin_b7
alias led_amarillo is pin_b6
pin_b7_direction = output
pin_b6_direction = output

alias entrada is pin_b5
pin_b5_direction = input
var byte dato = 0
var byte longitud_mensaje = 0
var byte digi0
var byte digi1
var byte digi2

var byte contador = 1


procedure bin2digits( byte out dig2, byte out dig1, byte out dig0, byte in numero ) is
   var byte centena = 0
   var byte decena = 0
   centena = numero / 100
   dig2 = centena
   centena = dig2 * 100
   numero = numero - centena
   decena = numero / 10
   dig1 = decena
   decena = dig1 * 10
   numero = numero - decena
   dig0 = numero
end procedure
; ===================================================================================================================

led_rojo = on
led_amarillo = on
delay_100ms(10)
led_rojo = off
led_amarillo = off


const byte start_string[] = "SD CARD FAT32 SMALL - SAMPLE STARTED\r\n\r\n"
print_string(serial_hw_data,start_string)



sd_start_read(0)
print_string(serial_hw_data,"**\r\n")
for 512 loop
   serial_hw_data = sd_data_byte
end loop
sd_stop_read()
print_string(serial_hw_data,"\r\n*****\r\n")




;longitud_mensaje = string_length(mensaje)

;lcd_clear_screen
;print_string(lcd,mensaje_ok)
;lcd_cursor_position(1,0)

; ---------------------------------------------------------------------------------
; Seteos iniciales
;delay_100ms(20)   ; esperamos 2 segs para que se inicie correctamente el módulo 8266
;print_string(serial_hw_data,reset)
;delay_100ms(30)
;print_string(serial_hw_data,setear_modo)
;delay_100ms(10)   ; acá debería volver un OK
;print_string(serial_hw_data,setear_dhcp)
;delay_100ms(10)   ; acá debería volver un OK
;print_string(serial_hw_data,setear_mux)
;delay_100ms(10)   ; acá debería volver un OK

; ---------------------------------------------------------------------------------

fat32_small_init() -- initalize data media

forever loop

   if entrada == on then
      ; leer datos del archivo y enviar serialmente a la PC para debugging
      -- READ THE FILE
      var byte x
      fat32_small_file_open(0)       -- open the file, at file sector 0 (the beginning)
      for fat32_small_file_size loop -- read the entire file with fat32_small_file_size
         fat32_small_file_read(x)    -- get one byte of data
         serial_hw_data = x          -- send it to the serial port
      end loop
      fat32_small_file_close()       -- close the file
   end if

end loop

