; Código de prueba para el 1er esclavo 16f628 recibiendo datos por la línea de 12 Vdc
include 16f628a                   -- target PICmicro
-- This program uses xtal oscillator
pragma target clock  20_000_000
-- configuration memory settings (fuses)
pragma target OSC      HS                        -- crystal or resonator
pragma target WDT      DISABLED                  -- watchdog
pragma target BROWNOUT DISABLED                  -- brownout reset
pragma target LVP      DISABLED                  -- low voltage programming
pragma target MCLR     INTERNAL                  --
--
asm clrf porta
enable_digital_io()                -- disable analog I/O (if any)

include delay

; ------------------------------------------------------------------------
alias serial_sw_tx_pin     is  pin_a4
alias serial_sw_rx_pin     is  pin_a5
pin_a4_direction = output
pin_a5_direction = input
const serial_sw_baudrate = 57_600
include serial_software
serial_sw_init()
; -----------------------------------------------------------

alias pin_datos is pin_a0
pin_a0_direction = input

;portb_direction =  output
pin_b0_direction = output
pin_b1_direction = output
pin_b2_direction = output
pin_b3_direction = output
pin_b4_direction = output
pin_b5_direction = output
pin_b6_direction = output
pin_b7_direction = output


pin_a1_direction = output
pin_a2_direction = output
pin_a3_direction = output
pin_a4_direction = output



var byte contador = 0
var byte byte_entrante = 0
var bit finalizado = false
var byte indice = 7
var bit bit_entrante

var byte digi0 = 0
var byte digi1 = 0
var byte digi2 = 0

; -------------------------------------------------------------------------------------
; byte a 3 caracteres
procedure bin2digits( byte out dig2, byte out dig1, byte out dig0, byte in numero ) is
   var byte centena = 0
   var byte decena = 0
   centena = numero / 100
   dig2 = centena
   centena = dig2 * 100
   numero = numero - centena
   decena = numero / 10
   dig1 = decena
   decena = dig1 * 10
   numero = numero - decena
   dig0 = numero
end procedure

procedure armar_byte(byte in posicion, bit in data, byte in holder) is

   var bit bit0 at holder : 0   -- get the bits out of the byte
   var bit bit1 at holder : 1
   var bit bit2 at holder : 2
   var bit bit3 at holder : 3
   var bit bit4 at holder : 4
   var bit bit5 at holder : 5
   var bit bit6 at holder : 6
   var bit bit7 at holder : 7

   if posicion == 0 then     -- set the correct bit in the byte
       bit0 = data
   elsif posicion == 1 then
       bit1 = data
   elsif posicion == 2 then
       bit2 = data
   elsif posicion == 3 then
       bit3 = data
   elsif posicion == 4 then
       bit4 = data
   elsif posicion == 5 then
       bit5 = data
   elsif posicion == 6 then
       bit6 = data
   elsif posicion == 7 then
       bit7 = data
   end if
end procedure

pin_b0 = on
pin_a1 = on
pin_a2 = on
pin_a3 = on
pin_a4 = on
delay_100ms(25)
pin_b0 = off
pin_a1 = off
pin_a2 = off
pin_a3 = off
pin_a4 = off

delay_100ms(10)

serial_sw_write("o")
serial_sw_write("k")
serial_sw_write(10)
serial_sw_write(13)

forever loop
   ; si el pin se puso a 1, llega pulso
   if pin_datos == true then
     ; contar tiempo de pulso
     while pin_datos loop
         delay_10us(10)
         contador = contador + 1
     end loop
     if ( contador >= 40 ) & ( contador <= 70 ) then
        ; pulso corto
        contador = 0
        bit_entrante = 1
        ; cargar arreglo de bits
        armar_byte(indice,bit_entrante, byte_entrante)
;        pin_b0 = ! pin_b0
        serial_sw_write("1")
        indice = indice - 1
     elsif ( contador >= 90 ) & ( contador <= 130 ) then
        ; pulso largo
        contador = 0
        bit_entrante = 0
        ; cargar arreglo de bits
        armar_byte(indice,bit_entrante, byte_entrante)
;        pin_a3 = ! pin_a3
        serial_sw_write("0")
        indice = indice - 1
     elsif ( contador >= 180 ) & ( contador <= 220 ) then
        ; marca final
        contador = 0
        finalizado = true
;        pin_a1 = ! pin_a1
        serial_sw_write(10)
        serial_sw_write(13)
     end if
   end if

   ; mostrar x serial
   if finalizado then
      finalizado = false
;      bin2digits(digi2,digi1,digi0,byte_entrante)
;      serial_sw_write(digi2+48)
;      serial_sw_write(digi1+48)
;      serial_sw_write(digi0+48)
;      serial_sw_write(10)
;      serial_sw_write(13)

   end if

end loop


