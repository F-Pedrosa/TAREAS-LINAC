; librería de dispositivo
include 16f877a
; -------------------------------
pragma target OSC HS
pragma target clock 20_000_000
-- no watchdog, no LVP
pragma target WDT  disabled
pragma target LVP  disabled
enable_digital_io()
; -------------------------------
; Para comunicaciones seriales x hardware
const serial_hw_baudrate = 115_200
include serial_hardware
serial_hw_init()
; -------------------------------
; para simplificar el formateo de los datos hacia la PC
include print
; -------------------------------
; librería para poder leer y escribir de la eeprom INTERNA del PIC
include pic_data_eeprom
; -------------------------------
; I2C pines
alias i2c_scl            is pin_c3
alias i2c_scl_direction  is pin_c3_direction
alias i2c_sda            is pin_c4
alias i2c_sda_direction  is pin_c4_direction
; constantes
const word _i2c_bus_speed = 1 ; * 100kHz
const bit _i2c_level = true   ; i2c levels (not SMB)
; incluir e inicializar librería I2C (RTC y eeprom)
include i2c_hardware
i2c_initialize()
; -------------------------------
; Configurar ADC...
const bit ADC_HIGH_RESOLUTION = high
; número canales analógicos
const byte ADC_NCHANNEL = 1
; sin referencias de tensión
const byte ADC_NVREF = ADC_NO_EXT_VREF
-- We want the fastest possible ADC timing, so we specify here the
-- minimum TAD value for this chip, which is 0.8 microseconds.
-- (see datasheet 39632 parameter 130 in table 28-29)
-- We don't care setting the actual maximum Tad value.
const ADC_MIN_TAD = 8
; librería ADC (para leer el SHARP)
include adc
; inicializarla
adc_init()
; -------------------------------
; Constantes y declaraciones a usarse por la librería del LCD
const byte LCD_ROWS     = 2               -- 1, 2 or 4 lines
const byte LCD_CHARS    = 16              -- 8, 16 or 20 chars per line
; alias para handshake:
alias  lcd_rs  is  pin_b4        ; una línea para RS
alias  lcd_en  is  pin_b5        ; una línea para EN
; alias para 4 líneas datos:
alias  lcd_d4  is  pin_b0         -- lcd databit d4
alias  lcd_d5  is  pin_b1         -- lcd databit d5
alias  lcd_d6  is  pin_b2         -- lcd databit d6
alias  lcd_d7  is  pin_b3         -- lcd databit d7
; setear direcciones
portb_direction = all_output
; librería e inicialización
include lcd_hd44780_4
lcd_init()
; -------------------------------

; GLOBALES
alias testigo is pin_b7
pin_d1_direction = input
alias lector_conectado is pin_d1

var byte anio = 0
var byte mes = 0
var byte dia = 0
var byte hora = 0
var byte minuto = 0
var byte segundo = 0

var byte dig4 = 0
var byte dig3 = 0
var byte dig2 = 0
var byte dig1 = 0
var byte dig0 = 0

var word arreglo_mediciones[25]
var word valor1 = 0
var word total_a_grabar = 0
var word valor_previo = 0

var word direccion = 0

var word dir = 0

; var byte arreglo_rtc[12] = {0,0,0,0,0,0,0,0,0,0,0,0}
var byte arreglo_a_enviar[9] = {0,0,0,0,0,0,0,0,0}

var byte arreglo_tiempo[12] = {0,0,0,0,0,0,0,0,0,0,0,0}

var word num_orden = 0

var bit resul
var byte desde_pc = 0
var byte y = 0
var byte cuenta = 0

const byte mensaje_set_rtc[] = "Ingrese fecha y hora según YYMMDDHHMMSS :"


; ------------------------------------
alias TMR1IE is PIE1_TMR1IE
alias TMR1if is PIR1_TMR1IF
; ------------------------------------

; ========================================== INTERRUPCIÓN TIMER1 =================================
OPTION_REG = 0
; Habilitar interrupciones de periféricos (entre ellos TIMER1)
INTCON = 0b_1100_0000
; Setear TMR1 en modo free run, con oscilador interno y con prescaler 1:8
T1CON = 0b0011_1101
; Y habilitar TIMER1
TMR1IE = on
; valores de inicialización para frectimer1 = 10 Hz
const byte InitTMR1H = 12
const byte InitTMR1L = 38
var bit Flag_tmr1 = false
; rutina interrupción TMR1 propiamente dicha, que se ejecuta cada aprox. 0.1 segs.
procedure TMR1_ISR is
  pragma interrupt
  if TMR1if then
     ; Resetear bandera
     TMR1if = low
     ; Reinicializar TMR1
     asm clrf TMR1L
     TMR1H = InitTMR1H
     TMR1L = InitTMR1L
     Flag_tmr1 = true
  end if
end procedure
; ============================================================================================



; Procedimientos
; Rutina que escribe un byte al RTC, sin convertirlo a BCD, sino puro.
; Ver también procedimiento siguiente.
procedure writertc ( byte in ad , byte in d ) is
;   var bit res

   i2c_start
   resul = i2c_transmit_byte ( 0b11010000 ) ; ID modo escritura
   resul = i2c_transmit_byte ( ad )		; dirección registro a escribir
   resul = i2c_transmit_byte ( d ) 		; poner dato en registro
   i2c_stop
end procedure
procedure escribir_rtc ( byte in ad , byte in d ) is
   ; Codificar el dato binario a formato BCD, en que
   ; almacena los datos el RTC.
   var byte loc
   loc = d
   loc = loc / 10
   loc = loc * 16
   d = d % 10
   loc = loc + d
   d = loc
   writertc ( ad , d )
end procedure
function dig2bin(byte in di2,byte in di1,byte in di0) return byte is
   var byte resultado = 0
   var byte temporal = 0

   if di2 != 0 then
      resultado = di2 * 100
   end if
   temporal = di1 * 10
   resultado = resultado + temporal
   resultado = resultado + di0
   return resultado
end function
procedure bin2digits( byte out dig2, byte out dig1, byte out dig0, byte in numero ) is
   var byte centena = 0
   var byte decena = 0
   centena = numero / 100
   dig2 = centena
   centena = dig2 * 100
   numero = numero - centena
   decena = numero / 10
   dig1 = decena
   decena = dig1 * 10
   numero = numero - decena
   dig0 = numero
end procedure

procedure word2digits( byte out dig4, byte out dig3, byte out dig2, byte out dig1, byte out dig0, word in numero ) is

   var word dec_miles = 0
   var word miles = 0
   var word centena = 0
   var byte decena = 0

   dec_miles = numero/10000
   dig4 = byte(dec_miles)
   dec_miles = dec_miles * 10000
   numero = numero - dec_miles
   miles = numero / 1000
   dig3 = byte(miles)
   miles = miles * 1000
   numero = numero - miles
   centena = numero / 100
   dig2 = byte(centena)
   centena = dig2 * 100
   numero = numero - centena
   decena = byte(numero / 10)
   dig1 = decena
   decena = dig1 * 10
   numero = numero - decena
   dig0 = byte(numero)

end procedure

procedure leer_rtc ( byte in ad, byte out digi1, byte out digi0 ) is
   var byte dato_rtc = 0
   var byte loc = 0
   var byte loc2 = 0
;   var bit resul = false
   ;------------
   I2C_start()
   ; se envía la ID del RTC con LSB en 0...
   resul = i2c_transmit_byte(0b1101_0000)
   ; y luego el número de registro deseado...
   resul = i2c_transmit_byte(ad)
   I2C_stop()
   ;------------
   I2C_start()
   ; con el LSB de la ID del RTC en 1, se pide una lectura...
   resul = i2c_transmit_byte(0b1101_0001)
   ; y se recibe el contenido del registro pedido antes...
   dato_rtc = I2C_receive_byte( false )
   I2C_stop()
   ;------------
   loc = dato_rtc
   loc2 = dato_rtc
   loc = loc & 0xF0    ; 0xF0 = 0b11110000, separa nibble alto
   digi1 = loc / 16
   digi0 = loc2 & 15   ; 15 = 0b00001111, separa nibble bajo
end procedure
procedure obtener_fecha_hora is
   var byte digito1 = 0
   var byte digito0 = 0

   delay_1ms(5)

   leer_rtc(6,digito1,digito0)
   digito1 = digito1 * 10
   anio = digito1 + digito0
   ; ---------------------------
   leer_rtc(5,digito1,digito0)
   digito1 = digito1 * 10
   mes = digito1 + digito0
   ; ---------------------------
   leer_rtc(4,digito1,digito0)
   digito1 = digito1 * 10
   dia = digito1 + digito0
   ; ---------------------------
   leer_rtc(2,digito1,digito0)
   digito1 = digito1 * 10
   hora = digito1 + digito0
   ; ---------------------------
   leer_rtc(1,digito1,digito0)
   digito1 = digito1 * 10
   minuto = digito1 + digito0
   ; ---------------------------
   leer_rtc(0,digito1,digito0)
   digito1 = digito1 * 10
   segundo = digito1 + digito0

end procedure

; Rutina para escribir  bytes en determinada EEPROM, usando la característica de
; escritura por páginas de las eeproms, más rápido que byte a byte
procedure escribir_trama_eeprom( byte in eepr_pos, word in address ) is
   var byte AX[2] at address
;   var bit resul
   I2C_start()
   ; primero, enviar el id de la EEPROM (su dirección específica y bit R/W)
   resul = i2c_transmit_byte(eepr_pos)
   ; enviar dirección donde escribir
   resul = i2c_transmit_byte(AX[1])
   resul = i2c_transmit_byte(AX[0])
   ; Enviar "página" de bytes (datos) a grabar en eeprom
   ; empezando por fecha y hora
   resul = i2c_transmit_byte(anio)
   resul = i2c_transmit_byte(mes)
   resul = i2c_transmit_byte(dia)
   resul = i2c_transmit_byte(hora)
   resul = i2c_transmit_byte(minuto)
   resul = i2c_transmit_byte(segundo)
   ; Convertir word adquirido a un formato de 3 dígitos
   word2digits( dig4,dig3,dig2, dig1, dig0, valor1 )
   ; grabar
   resul = i2c_transmit_byte(dig2)
   resul = i2c_transmit_byte(dig1)
   resul = i2c_transmit_byte(dig0)
   I2C_stop()
   delay_1ms(4)
end procedure


procedure leer_trama_enviar(word in direcc) is
   var byte dire[2] at direcc
;   var bit r
   var byte i

   var word total = 0

   var byte digi4
   var byte digi3
   var byte digi2
   var byte digi1
   var byte digi0

   i2c_start()
   resul = i2c_transmit_byte(0xA0) -- i2c address for write (for memory address, within eeprom)

   resul = resul & i2c_transmit_byte(dire[1]) -- memory address high byte
   resul = resul & i2c_transmit_byte(dire[0]) -- memory address low  byte

   i2c_restart()
   resul = resul & i2c_transmit_byte(0xA1) -- i2c address for read (of memory from eeprom)

   ; cargar arreglo con trama de datos
   for 8 using i loop
       arreglo_a_enviar[i] = i2c_receive_byte(true)
   end loop
   arreglo_a_enviar[8] = i2c_receive_byte(false)

   i2c_stop()

   ; enviar trama formateada serialmente a PC
   ; número de orden
   word2digits(digi4,digi3,digi2,digi1,digi0,num_orden)
   serial_hw_write(digi3+48)
   serial_hw_write(digi2+48)
   serial_hw_write(digi1+48)
   serial_hw_write(digi0+48)
   serial_hw_write(" ")
   num_orden = num_orden + 1
   ; fecha
   print_byte_dec(serial_hw_data, arreglo_a_enviar[0])
   serial_hw_write("/")
   print_byte_dec(serial_hw_data, arreglo_a_enviar[1])
   serial_hw_write("/")
   print_byte_dec(serial_hw_data, arreglo_a_enviar[2])
   serial_hw_write(" ")
   ; hora
   print_byte_dec(serial_hw_data, arreglo_a_enviar[3])
   serial_hw_write(":")
   print_byte_dec(serial_hw_data, arreglo_a_enviar[4])
   serial_hw_write(":")
   print_byte_dec(serial_hw_data, arreglo_a_enviar[5])
   serial_hw_write(" ")
   serial_hw_write(" ")
   ; valor analógico medido
   serial_hw_write(arreglo_a_enviar[6]+48)
   serial_hw_write(arreglo_a_enviar[7]+48)
   serial_hw_write(arreglo_a_enviar[8]+48)
   serial_hw_write(13)
   serial_hw_write(10)

end procedure


procedure leer_trama(word in direcc) is
   var byte dire[2] at direcc
;   var bit r
   var byte i

   i2c_start()
   resul = i2c_transmit_byte(0xA0) -- i2c address for write (for memory address, within eeprom)

   resul = resul & i2c_transmit_byte(dire[1]) -- memory address high byte
   resul = resul & i2c_transmit_byte(dire[0]) -- memory address low  byte

   i2c_restart()
   resul = resul & i2c_transmit_byte(0xA1) -- i2c address for read (of memory from eeprom)

   ; cargar arreglo con trama de datos
   for 8 using i loop
       arreglo_a_enviar[i] = i2c_receive_byte(true)
   end loop
   arreglo_a_enviar[8] = i2c_receive_byte(false)

   i2c_stop()

end procedure

procedure adquirir_promediar is

   var byte cuenta = 0
   var byte y = 0
   var word val_mar
   var byte indis[2] at val_mar
   var word total = 0
   var word promedio = 0
   var byte cantidad
   
   for 5 using cuenta loop
     ; cargar arreglo de n elementos (tamaño fijado por el tema RAM del 16F877)
      for count(arreglo_mediciones) using y loop
          adc_read_bytes(0, indis[1], indis[0])
          arreglo_mediciones[y] =  val_mar      ; esta variable encapsula las otras dos
          delay_10us(3)                         ; retardo suficiente para que adquiera bien (¿?)
      end loop
      ; calcular promedio, redondear hacia arriba
      cantidad = count(arreglo_mediciones)
      for cantidad using y loop
          total = total + arreglo_mediciones[y]
      end loop
      promedio = (total/cantidad)+1   ; recordar que la división es entera
      ; mostrar valor promedio
      bin2digits(dig2,dig1,dig0,cuenta)
      lcd_write_char(dig0+48)

      lcd_write_char(" ")
      lcd_write_char("P")
      lcd_write_char("r")
      lcd_write_char("o")
      lcd_write_char("m")
      lcd_write_char(":")
      lcd_write_char(" ")
      word2digits(dig4,dig3,dig2,dig1,dig0,promedio)
      lcd_write_char(dig4+48)
      lcd_write_char(dig3+48)
      lcd_write_char(dig2+48)
      lcd_write_char(dig1+48)
      lcd_write_char(dig0+48)

;      delay_100ms(30)
      lcd_clear_screen
      total_a_grabar = total_a_grabar + promedio
      promedio = 0
      total = 0

   end loop
end procedure

procedure decide_si_graba_envia is
   ; si hubo cambios en la medición, grabar en eeprom
   if (total_a_grabar < (valor_previo - 2)) | (total_a_grabar > (valor_previo + 2)) then
      obtener_fecha_hora
      valor1 = total_a_grabar        ; necesario por el código de escribir_trama_eeprom
      escribir_trama_eeprom(0b1010_0000,direccion)
      direccion = direccion + 9      ; incrementar la dirección
      Data_EEprom_Write_word(0, direccion)  ; y guardar nuevo puntero de escritura
      delay_1ms(4)
      valor_previo = total_a_grabar

   ;  PEDIR HABILITACIÓN DE ENVÍO A LA PC!
   ; Preguntar si hay conexión con la PC, si sí, enviar trama recién grabada
   ; Enviar caracter hacia la PC que testea si la PC está en condición
   ; de recibir trama, si la respuesta es la correcta, entonces se envía
   serial_hw_write("%")
   ; Y ahora debería llegar la respuesta
   if serial_hw_read(desde_pc) then
      ; y si fue la correcta, enviar la última trama grabada
      if desde_pc == "%" then
         ; Se le resta 9 para que lea la última trama grabada.
         leer_trama_enviar(direccion - 9)
       end if
    end if

   end if
end procedure

procedure puesta_hora_rtc is
        ; Se asume que el código del forever loop ha cargado los
        ; valores correctos de fecha y hora ANTES de invocar a este proc.
        ; Convertir los elementos del string recibido (en el arreglo)
        ; en bytes para luego grabarlos en el RTC.
        anio = dig2bin(0,arreglo_tiempo[0],arreglo_tiempo[1])
        mes = dig2bin(0,arreglo_tiempo[2],arreglo_tiempo[3])
        dia = dig2bin(0,arreglo_tiempo[4],arreglo_tiempo[5])
        hora = dig2bin(0,arreglo_tiempo[6],arreglo_tiempo[7])
        minuto = dig2bin(0,arreglo_tiempo[8],arreglo_tiempo[9])
        segundo = dig2bin(0,arreglo_tiempo[10],arreglo_tiempo[11])
        ; setear RTC con la fecha y hora recién recibidos y convertidos
        escribir_rtc ( 0 , segundo )
        escribir_rtc ( 1 , minuto )
        escribir_rtc ( 2 , hora )
        escribir_rtc ( 4 , dia )
        escribir_rtc ( 5 , mes )
        escribir_rtc ( 6 , anio )
        writertc ( 7 , 16 )
end procedure



procedure enviar_cada_8_horas is
; bloque que controla la hora, si son las 08:00, o las 16:00, o las 00:00
; envía las tramas que coincidan con dicha fecha, con número de orden consecutivo y NO REPETIDO
   obtener_fecha_hora
   if hora == 8 & minuto == 0 & segundo == 0 then           ; <--- en la realidad
      while arreglo_a_enviar[1] != 255 loop
         leer_trama(dir)
         dir = dir + 9          ; se suma 9 porque ese es el tamaño de trama
         ; arrreglo[0] contiene el año, arreglo[1] el mes y arreglo[2] el día
            if anio == arreglo_a_enviar[0] then
               if mes == arreglo_a_enviar[1] then
                  if dia == arreglo_a_enviar[2] then
                     leer_trama_enviar(dir)
                     print_crlf(serial_hw_data)
                     num_orden = num_orden + 1
                     Data_EEprom_Write_word(254, num_orden)
                     ;delay_100ms(10)          ; para que mande una sóla vez la trama
                  end if
               end if
            end if
      end loop
   elsif hora == 16 & minuto == 0 & segundo == 0 then
      while arreglo_a_enviar[1] != 255 loop
         leer_trama(dir)
         dir = dir + 9          ; se suma 9 porque ese es el tamaño de trama
         ; arrreglo[0] contiene el año, arreglo[1] el mes y arreglo[2] el día
            if anio == arreglo_a_enviar[0] then
               if mes == arreglo_a_enviar[1] then
                  if dia == arreglo_a_enviar[2] then
                     leer_trama_enviar(dir)
                     print_crlf(serial_hw_data)
                     num_orden = num_orden + 1
                     Data_EEprom_Write_word(254, num_orden)
                     ;delay_100ms(10)          ; para que mande una sóla vez la trama
                  end if
               end if
            end if
      end loop
   elsif hora == 0 & minuto == 0 & segundo == 0 then
      while arreglo_a_enviar[1] != 255 loop
         leer_trama(dir)
         dir = dir + 9          ; se suma 9 porque ese es el tamaño de trama
         ; arrreglo[0] contiene el año, arreglo[1] el mes y arreglo[2] el día
            if anio == arreglo_a_enviar[0] then
               if mes == arreglo_a_enviar[1] then
                  if dia == arreglo_a_enviar[2] then
                     leer_trama_enviar(dir)
                     print_crlf(serial_hw_data)
                     num_orden = num_orden + 1
                     Data_EEprom_Write_word(254, num_orden)
                     ;delay_100ms(10)          ; para que mande una sóla vez la trama
                  end if
               end if
            end if
      end loop
   end if

end procedure

procedure enviar_trama_serialmente is
   while arreglo_a_enviar[0] == 11 loop
      ; comparar año, mes, día
      if anio == arreglo_a_enviar[0] then
         if mes == arreglo_a_enviar[1] then
            if dia == arreglo_a_enviar[2] then
               ; enviar trama formateada serialmente a PC
               ; número de orden
               word2digits(dig4,dig3,dig2,dig1,dig0,num_orden)
               serial_hw_write(dig3+48)
               serial_hw_write(dig2+48)
               serial_hw_write(dig1+48)
               serial_hw_write(dig0+48)
               serial_hw_write(" ")
               ; fecha
               print_byte_dec(serial_hw_data, arreglo_a_enviar[0])
               serial_hw_write("/")
               print_byte_dec(serial_hw_data, arreglo_a_enviar[1])
               serial_hw_write("/")
               print_byte_dec(serial_hw_data, arreglo_a_enviar[2])
               serial_hw_write(" ")
               ; hora
               print_byte_dec(serial_hw_data, arreglo_a_enviar[3])
               serial_hw_write(":")
               print_byte_dec(serial_hw_data, arreglo_a_enviar[4])
               serial_hw_write(":")
               print_byte_dec(serial_hw_data, arreglo_a_enviar[5])
               serial_hw_write(" ")
               serial_hw_write(" ")
               ; valor analógico medido
               serial_hw_write(arreglo_a_enviar[6]+48)
               serial_hw_write(arreglo_a_enviar[7]+48)
               serial_hw_write(arreglo_a_enviar[8]+48)
               num_orden = num_orden + 1
               Data_EEprom_Write_word(254, num_orden)
               print_crlf(serial_hw_data)
               dir = dir + 9
               leer_trama(dir)
            end if
         end if
      end if
   end loop
end procedure

procedure cargar_fecha is
      anio = ((arreglo_tiempo[0])-48)*10 + (arreglo_tiempo[1]-48)
      mes = ((arreglo_tiempo[2])-48)*10 + (arreglo_tiempo[3]-48)
      dia = ((arreglo_tiempo[4])-48)*10 + (arreglo_tiempo[5]-48)
      hora = ((arreglo_tiempo[6])-48)*10 + (arreglo_tiempo[7]-48)
      minuto = ((arreglo_tiempo[8])-48)*10 + (arreglo_tiempo[9]-48)
      segundo = ((arreglo_tiempo[10])-48)*10 + (arreglo_tiempo[11]-48)
end procedure

procedure lector_esta_conectado
   if lector_conectado then
      ; Asegurarse que el ADC interno esté "apagado", para impedir la generación
      ; de interrupciones y otros efectos extraños.
      ADC_off
      ; asegurarse que los pines del bus I2C estén "desconectados"
      pin_c3_direction = input
      pin_c4_direction = input
      ; un pitido cortito como señal de que se va a apagar el PIC
      testigo = on
      delay_100ms( 2 )              ; 0,2 segs de pitido
      testigo = off
      delay_100ms( 2 )
      ; Limpiar el watchdog, por si acaso, recomendado en hoja de datos.
      asm clrwdt
      ; Poner en modo "dormido" (bajo consumo, reloj detenido, programa parado).
      asm sleep
   end if
end procedure




; =============================== PINCIPAL ======================================

; ------------------------------------------------------------------------------
; Verificar si se conectó el lector de eeproms y si sí, detener al PIC
lector_esta_conectado
; ------------------------------------------------------------------------------
testigo = off
testigo = on
delay_100ms(15)
testigo = off

; para que las lecturas no sean sobreescritas (entran aprox 3640 tramas por eeprom)
direccion =  Data_EEprom_word(0)

lcd_clear_screen()
const byte str1[] = "OK!"
print_string(lcd, str1)
delay_100ms(15)
lcd_clear_screen()
; ------------------------------------------------------------------------------


var byte temporal = 0
var bit bandera = false


forever loop

   if Flag_tmr1 then
      if temporal == 30 then
         temporal = 0
         bandera = true
         testigo = !testigo
      else
         temporal = temporal + 1
      end if
      Flag_tmr1 = false
   end if
   if bandera then
      bandera = false
       adquirir_promediar
      total_a_grabar = (total_a_grabar/5)+1
;      decide_si_graba_envia

   end if


   ; Invocar rutina que adquiere por ráfagas y calcula los promedios
;   adquirir_promediar
   ; Promediado de las ráfagas
;   total_a_grabar = (total_a_grabar/5)+1

   ; Invocar rutina que compara el valor reción adquirido con el previo
   ; más/menos una tolerancia y según sea el resultado procede a grabar en eeprom
   ; y si es posible, envía la trama guardada hacia la pc
;   decide_si_graba_envia

   ; -------------------------------------------------------------------------------
   ; Sección de comunicaciones serie DESDE LA PC
   if serial_hw_read(desde_pc) then
      ; Puesta en hora del RTC de la AME desde la PC
      if desde_pc == "t" then
         ; recibir string con fecha y hora desde la PC
         ; de la forma: YYMMDDHHMMSS, y terminada con la letra "z"
         while desde_pc != "z" loop
            if Serial_HW_read(desde_pc) then
               if desde_pc != "z" then
                  arreglo_tiempo[y] = (desde_pc - 48)
                  y = y + 1
               end if
            end if
         end loop
         ; Con el arreglo recién cargado, poner en hora RTC.
         puesta_hora_rtc

      ; EL siguiente bloque recibe una fecha/hora desde la PC, compara y devuelve trama q coincide...
      ; si se recibe una x lo que sigue es fecha/hora de la trama a leer
      elsif desde_pc == "x" then
         cuenta = 0
         ; El string de fecha/hora termina en un caracter "p"
         while desde_pc != "p" loop
            if desde_pc == "p" then
               exit loop
            end if
            ; Cargar arreglo fecha/hora
            if serial_hw_read(desde_pc) then
               arreglo_tiempo[cuenta] = desde_pc
               cuenta = cuenta + 1
            end if
         end loop

         ; leer trama, comparar con fecha pedida inicio, enviar
         cargar_fecha
         ; Arrancamos de 27 porque en esta posición está la primera trama sana de un grupo de
         ; 4 tramas con fechas bien definidas, en el definitivo debería arrancar en 0
         dir = 27
         leer_trama(dir)
         enviar_trama_serialmente
         serial_hw_write("@")
      end if
   end if

end loop

